Folder Structure
--------------------------------------------------
src/
    app/
        favicon.ico
        globals.css
        layout.tsx
        page.tsx
        api/
            generate-hero/
                route.ts
            generate-synergy/
                route.ts
        fonts/
            GeistMonoVF.woff
            GeistVF.woff
    components/
        HeroPicker.tsx
        RecommendationItem.tsx
        SynergyPicker.css
        SynergyPicker.tsx


File Contents
--------------------------------------------------


C:\v2dotapicker\dota-picker-app\src\app\globals.css
File type: .css
/* Importa la fuente Poppins desde Google Fonts */
@import url('https://fonts.googleapis.com/css2?family=Poppins:wght@400;600&display=swap');

/* Estilos generales */
body {
  background-color: #1c1c1c; /* Fondo oscuro */
  color: #ffffff; /* Texto blanco */
  font-family: 'Poppins', sans-serif; /* Nueva fuente Poppins */
  margin: 0; /* Sin margen por defecto */
  padding: 0; /* Sin padding por defecto */
  display: flex;
  flex-direction: column;
  min-height: 100vh;
}

.hero-picker-container {
  max-width: 1200px;
  margin: 20px auto; /* Centramos el contenedor */
  padding: 20px; /* Padding interno */
  background-color: rgba(50, 50, 50, 0.8); /* Fondo semi-transparente */
  border-radius: 10px; /* Bordes redondeados */
  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.2); /* Sombra del contenedor */
  display: flex;
  flex-direction: column; /* Flexbox para alinear el contenido verticalmente */
}

label {
  font-size: 18px; /* Tamaño de fuente */
  margin-bottom: 8px; /* Espaciado inferior */
}

select {
  width: 100%;
  padding: 10px;
  margin-bottom: 20px;
  border-radius: 5px;
  border: 1px solid #444;
  background-color: #333;
  color: #ffffff;
  font-size: 16px;
  transition: border-color 0.3s;
}

select:hover {
  border-color: #888;
}

button {
  padding: 10px 20px;
  background-color: #007d00;
  color: white;
  border: none;
  border-radius: 5px;
  cursor: pointer;
  transition: background-color 0.3s;
  align-self: flex-end; /* Alinear botón a la derecha */
}

button:hover {
  background-color: #005700;
}

.loader {
  border: 4px solid rgba(255, 255, 255, 0.2);
  border-radius: 50%;
  border-top: 4px solid #007d00;
  width: 40px;
  height: 40px;
  animation: spin 1s linear infinite;
  margin: 20px auto;
  display: flex;
  justify-content: center;
  align-items: center;
}

@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}

.counter-picks {
  margin-top: 20px;
  padding: 10px;
  background-color: #2a2a2a;
  border-radius: 5px;
  line-height: 1.5;
  display: flex;
  flex-direction: column; /* Colocar elementos uno debajo del otro */
}

.counter-pick-item {
  margin-bottom: 10px;
  padding: 5px;
  background-color: #3a3a3a;
  border-radius: 3px;
  display: flex;
  justify-content: space-between;
  align-items: center; /* Alineación centrada verticalmente */
}

.counter-pick-item p {
  margin: 0;
  font-size: 16px;
}

/* Grid de héroes */
.hero-grid {
  display: grid;
  gap: 6px;
  grid-template-columns: repeat(12, minmax(90px, 1fr));
  margin-bottom: 20px;
}

.hero-card {
  background-color: rgba(27, 27, 27, 0.8);
  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.5);
  text-align: center;
  height: fit-content;
  cursor: pointer;
  transition: transform 0.2s, border 0.2s;
  flex-direction: column; /* Contenido de la tarjeta alineado en columna */
  justify-content: space-between; /* Distribuye el espacio entre los elementos */
}

.hero-card:hover {
  transform: scale(1.05);
}

.selected {
  border: 2px solid #00ff00 !important;
}

.hero-name {
  font-size: 18px;
  margin-bottom: 10px;
  color: #ffffff;
}

.hero-image {
  width: 100%;
  height: 60px;
  object-fit: cover;
}

@media (max-width: 600px) {
  .hero-grid {
    grid-template-columns: repeat(3, 1fr); /* 2 columnas en pantallas pequeñas */
  }

  .hero-name {
    font-size: 14px;
  }
}

.flexbloque{
  gap: 20px;
  display: flex;
}

.hero-card p{
  margin-block-start: 4px;
  text-overflow: ellipsis;
  overflow-wrap: break-word;
  margin-block-end: 4px;
}

--------------------------------------------------
File End
--------------------------------------------------


C:\v2dotapicker\dota-picker-app\src\app\layout.tsx
File type: .tsx
import type { Metadata } from "next";
import localFont from "next/font/local";
import "./globals.css";

const geistSans = localFont({
  src: "./fonts/GeistVF.woff",
  variable: "--font-geist-sans",
  weight: "100 900",
});
const geistMono = localFont({
  src: "./fonts/GeistMonoVF.woff",
  variable: "--font-geist-mono",
  weight: "100 900",
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        {children}
      </body>
    </html>
  );
}


--------------------------------------------------
File End
--------------------------------------------------


C:\v2dotapicker\dota-picker-app\src\app\page.tsx
File type: .tsx
"use client";

import HeroPicker from '@/components/HeroPicker';
import SynergyPicker from '@/components/SynergyPicker';
import { useState } from 'react';

export default function Home() {
  const [tool, setTool] = useState<'counter' | 'synergy' | null>(null);

  return (
    <div className="hero-picker-container flex flex-col items-center justify-center min-h-screen">
      <h1 className="text-5xl font-bold mb-4 text-white">¡Bienvenido a Dota Picker!</h1>
      <p className="text-lg mb-6 text-center">Selecciona una herramienta para mejorar tu estrategia.</p>
      
      {!tool && (
        <div className="flex space-x-4 flexbloque">
          <button 
            className="bg-blue-500 text-white rounded p-4 hover:bg-blue-600 transition" 
            onClick={() => setTool('counter')}
          >
            Counter Picker
          </button>
          <button 
            className="bg-green-500 text-white rounded p-4 hover:bg-green-600 transition" 
            onClick={() => setTool('synergy')}
          >
            Synergy Picker
          </button>
        </div>
      )}

      {tool === 'counter' && <HeroPicker />}
      {tool === 'synergy' && <SynergyPicker />}
    </div>
  );
}


--------------------------------------------------
File End
--------------------------------------------------


C:\v2dotapicker\dota-picker-app\src\app\api\generate-hero\route.ts
File type: .ts
// src/app/api/generate-hero/route.ts
import { NextResponse } from 'next/server';
import OpenAI from 'openai';

const openai = new OpenAI({
  apiKey: process.env.NEXT_PUBLIC_OPENAI_API_KEY,
});

export async function POST(req: Request) {

   
   const headers = {
        'Access-Control-Allow-Origin': '*', // O especifica tu dominio si es necesario
        'Access-Control-Allow-Methods': 'POST',
        'Content-Type': 'application/json',
      }; 
    
  const { userHeroSelection, position } = await req.json();

  // Solicitar la respuesta en español con información breve
  const prompt = `Eres un Profesional de Dota 2. Dame los 3 mejores héroes para counterpickear en la meta actual a ${userHeroSelection} que sean solo unicamente heroes de la posición de ${position} en Dota 2. Proporciona cada opción en una línea separada y usa descripciones breves para que no se corten las respuestas.`;

  try {
    const response = await openai.chat.completions.create({
      model: 'gpt-3.5-turbo',
      messages: [{ role: 'user', content: prompt }],
      max_tokens: 150,
      temperature: 0.0, // Ajustar la temperatura para respuestas más controladas
    });

    const counterPicks = response.choices?.[0]?.message.content?.trim() || 'Sin héroes seleccionados';
    
    // Asegurarse de que se devuelven exactamente 3 héroes
    const picksArray = counterPicks.split('\n').map(pick => pick.trim()).filter(pick => pick);
    const finalPicks = picksArray.length >= 3 ? picksArray.slice(0, 3) : picksArray;

    return new NextResponse(JSON.stringify({ counterPicks: finalPicks.join('\n') }), { headers });
  } catch (error) {
    console.error('Error en OpenAI:', error);
    return new NextResponse(JSON.stringify({ error: 'Error en la generación de héroes. ' }), { status: 500, headers });
  }
}

--------------------------------------------------
File End
--------------------------------------------------


C:\v2dotapicker\dota-picker-app\src\app\api\generate-synergy\route.ts
File type: .ts
import { NextResponse, NextRequest } from "next/server";
import OpenAI from "openai";

const openai = new OpenAI({
  apiKey: process.env.NEXT_PUBLIC_OPENAI_API_KEY,
});

// Define un tipo para el héroe
type Hero = {
  name: string;
  role?: string;
};

export async function POST(request: NextRequest) {
  const { allies, enemies, rank } = await request.json();

  // Definición de roles
  const roles: string[] = [
    "Hard Support",
    "Support",
    "Midlaner",
    "Carry",
    "Offlaner",
  ];

  // Identificar roles faltantes en aliados
  const filledRoles: (string | null)[] = allies.map(
    (hero: Hero, index: number) => (hero ? roles[index] : null)
  );

  // Aquí se agrega el tipo 'string' al parámetro role
  const missingRoles = roles.filter(
    (role: string) => !filledRoles.includes(role)
  );

  /*
  // Generar el prompt basado en los héroes seleccionados y los roles faltantes
  const prompt = `Eres un analista profesional de sinergia de héroes de Dota 2. Aquí tienes una lista de héroes: 
  Aliados: ${allies.map((a: Hero) => a?.name).join(', ')}, 
  Enemigos: ${enemies.map((e: Hero) => e?.name).join(', ')}, 
  Nivel de medalla de la partida: ${rank}. 
  Los roles que faltan en aliados son: ${missingRoles.join(', ')}. 
  No recomiendes héroes que ya están presentes en Aliados o Enemigos. 
  Si el usuario no coloco ningún heroe Enemigos entonces solo da una respuesta en base a la mejor sinergia y combo de equipo.
  Da una respuesta directa y profesional del héroe más adecuado por cada rol faltante en base a sinergia y contra pickear a los enemigos.`;
  */

  const prompt = `Eres un analista profesional de Dota 2 especializado en estrategias y sinergia de héroes. Dados los siguientes héroes:
Aliados: ${allies.map((a: Hero) => a?.name).join(", ")}
Enemigos: ${enemies.map((e: Hero) => e?.name).join(", ")}
Nivel de medalla de la partida: ${rank}

Los roles faltantes en el equipo aliado son: ${missingRoles.join(", ")}.

Proporciona recomendaciones concisas y directas del mejor héroe para cada rol faltante, considerando lo siguiente:
- Sinergia y combos efectivos con los héroes aliados existentes.
- Habilidad para contrarrestar y enfrentar a los héroes enemigos.
- Viabilidad y eficacia en la meta actual del nivel de medalla especificado.

Evita recomendar héroes que ya estén presentes en ambos equipos.

Si no se proporcionaron héroes enemigos, enfoca tu respuesta únicamente en la mejor sinergia y combos con los héroes aliados.

Limita tu respuesta a un máximo de 50 palabras por recomendación para cada rol. La claridad y la precisión son esenciales.`;

  const response = await openai.chat.completions.create({
    model: "gpt-3.5-turbo",
    messages: [{ role: "user", content: prompt }],
    max_tokens: 300,
    temperature: 0.0,
  });

  const suggestions = response.choices[0].message.content;

  return NextResponse.json({ suggestions });
}


--------------------------------------------------
File End
--------------------------------------------------


C:\v2dotapicker\dota-picker-app\src\components\HeroPicker.tsx
File type: .tsx
// src/app/components/HeroPicker.tsx
"use client";

import { useState } from 'react';

// Lista de héroes con su nombre y video
const heroes = [
  {
    name: 'Abaddon',
    image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/abaddon.png',
  },
  {
    name: 'Alchemist',
    image: './images/mini/alchemist.png',
  },
  {
    name: 'Ancient Apparition',
    image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/ancient_apparition.png',
  },
  {
    name: 'Anti-Mage',
    image: './images/mini/antimage.png',
  },
  {
    name: 'Arc Warden',
    image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/arc_warden.png',
  },
  {
    name: 'Axe',
    image: './images/mini/axe.png',
  },
  {
    name: 'Bane',
    image: './images/mini/bane.png',
  },
  {
    name: 'Batrider',
    image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/batrider.png',
  },
  {
    name: 'Beastmaster',
    image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/beastmaster.png',
  },
  {
    name: 'Bloodseeker',
    image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/bloodseeker.png',
  },
  {
    name: 'Bounty Hunter',
    image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/bounty_hunter.png',
  },
  {
    name: 'Brewmaster',
    image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/brewmaster.png',
  },
  {
    name: 'Bristleback',
    image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/bristleback.png',
  },
  {
    name: 'Broodmother',
    image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/broodmother.png',
  },
  {
    name: 'Centaur Warrunner',
    image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/centaur.png',
  },
  {
    name: 'Chaos Knight',
    image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/chaos_knight.png',
  },
  {
    name: 'Chen',
    image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/chen.png',
  },
  {
    name: 'Clinkz',
    image: './images/mini/clinkz.png',
  },
  {
    name: 'Clockwerk',
    image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/rattletrap.png',
  },
  {
    name: 'Crystal Maiden',
    image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/crystal_maiden.png',
  },
  {
    name: 'Dark Seer',
    image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/dark_seer.png',
  },
  {
    name: 'Dark Willow',
    image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/dark_willow.png',
  },
  {
    name: 'Dazzle',
    image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/dazzle.png',
  },
  {
    name: 'Death Prophet',
    image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/death_prophet.png',
  },
  {
    name: 'Disruptor',
    image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/disruptor.png',
  },
  {
    name: 'Doom',
    image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/doom_bringer.png',
  },
  {
    name: 'Dragon Knight',
    image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/dragon_knight.png',
  },
  {
    name: 'Drow Ranger',
    image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/drow_ranger.png',
  },
  {
    name: 'Earth Spirit',
    image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/earth_spirit.png',
  },
  {
    name: 'Earthshaker',
    image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/earthshaker.png',
  },
  {
    name: 'Elder Titan',
    image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/elder_titan.png',
  },
  {
    name: 'Ember Spirit',
    image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/ember_spirit.png',
  },
  {
    name: 'Enchantress',
    image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/enchantress.png',
  },
  {
    name: 'Enigma',
    image: './images/mini/enigma.png',
  },
  {
    name: 'Faceless Void',
    image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/faceless_void.png',
  },
  {
    name: 'Grimstroke',
    image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/grimstroke.png',
  },
  {
    name: 'Gyrocopter',
    image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/gyrocopter.png',
  },
  {
    name: 'Hoodwink',
    image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/hoodwink.png',
  },
  {
    name: 'Huskar',
    image: './images/mini/huskar.png',
  },
  {
    name: 'Invoker',
    image: './images/mini/invoker.png',
  },
  {
    name: 'Io',
    image: './images/mini/wisp.png',
  },
  {
    name: 'Jakiro',
    image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/jakiro.png',
  },
  {
    name: 'Juggernaut',
    image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/juggernaut.png',
  },
  {
    name: 'Keeper of the Light',
    image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/keeper_of_the_light.png',
  },
  {
    name: 'Kunkka',
    image: './images/mini/kunkka.png',
  },
  {
    name: 'Legion Commander',
    image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/legion_commander.png',
  },
  {
    name: 'Leshrac',
    image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/leshrac.png',
  },
  {
    name: 'Lich',
    image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/lich.png',
  },
  {
    name: 'Lifestealer',
    image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/life_stealer.png',
  },
  {
    name: 'Lina',
    image: './images/mini/lina.png',
  },
  {
    name: 'Lion',
    image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/lion.png',
  },
  {
    name: 'Lone Druid',
    image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/lone_druid.png',
  },
  {
    name: 'Luna',
    image: './images/mini/luna.png',
  },
  {
    name: 'Lycan',
    image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/lycan.png',
  },
  {
    name: 'Magnus',
    image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/magnataur.png',
  },
  {
    name: 'Marci',
    image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/marci.png',
  },
  {
    name: 'Mars',
    image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/mars.png',
  },
  {
    name: 'Medusa',
    image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/medusa.png',
  },
  {
    name: 'Meepo',
    image: './images/mini/meepo.png',
  },
  {
    name: 'Mirana',
    image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/mirana.png',
  },
  {
    name: 'Monkey King',
    image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/monkey_king.png',
  },
  {
    name: 'Morphling',
    image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/morphling.png',
  },
  {
    name: 'Muerta',
    image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/muerta.png',
  },
  {
    name: 'Naga Siren',
    image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/naga_siren.png',
  },
  {
    name: "Nature's Prophet",
    image: './images/mini/furion.png',
  },
  {
    name: 'Necrophos',
    image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/necrolyte.png',
  },
  {
    name: 'Night Stalker',
    image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/night_stalker.png',
  },
  {
    name: 'Nyx Assassin',
    image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/nyx_assassin.png',
  },
  {
    name: 'Ogre Magi',
    image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/ogre_magi.png',
  },
  {
    name: 'Omniknight',
    image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/omniknight.png',
  },
  {
    name: 'Oracle',
    image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/oracle.png',
  },
  {
    name: 'Outworld Devourer',
    image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/obsidian_destroyer.png',
  },
  {
    name: 'Pangolier',
    image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/pangolier.png',
  },
  {
    name: 'Phantom Assassin',
    image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/phantom_assassin.png',
  },
  {
    name: 'Phantom Lancer',
    image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/phantom_lancer.png',
  },
  {
    name: 'Phoenix',
    image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/phoenix.png',
  },
  {
    name: 'Primal Beast',
    image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/primal_beast.png',
},
{
name: 'Puck',
image: './images/mini/puck.png',
},
{
name: 'Pudge',
image: './images/mini/pudge.png',
},
{
name: 'Pugna',
image: './images/mini/pugna.png',
},
{
name: 'Queen of Pain',
image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/queenofpain.png',
},
{
name: 'Razor',
image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/razor.png',
},
{
name: 'Riki',
image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/riki.png',
},
{
name: 'Rubick',
image: './images/mini/rubick.png',
},
{
name: 'Sand King',
image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/sand_king.png',
},
{
name: 'Shadow Demon',
image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/shadow_demon.png',
},
{
name: 'Shadow Fiend',
image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/nevermore.png',
},
{
name: 'Shadow Shaman',
image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/shadow_shaman.png',
},
{
name: 'Silencer',
image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/silencer.png',
},
{
name: 'Skywrath Mage',
image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/skywrath_mage.png',
},
{
name: 'Slardar',
image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/slardar.png',
},
{
name: 'Slark',
image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/slark.png',
},
{
name: 'Snapfire',
image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/snapfire.png',
},
{
name: 'Sniper',
image: './images/mini/sniper.png',
},
{
name: 'Spectre',
image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/spectre.png',
},
{
name: 'Spirit Breaker',
image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/spirit_breaker.png',
},
{
name: 'Storm Spirit',
image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/storm_spirit.png',
},
{
name: 'Sven',
image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/sven.png',
},
{
name: 'Techies',
image: './images/mini/techies.png',
},
{
name: 'Templar Assassin',
image: './images/mini/templar_assassin.png',
},
{
name: 'Terrorblade',
image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/terrorblade.png',
},
{
name: 'Tidehunter',
image: './images/mini/tidehunter.png',
},
{
name: 'Timbersaw',
image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/shredder.png',
},
{
name: 'Tinker',
image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/tinker.png',
},
{
name: 'Tiny',
image: './images/mini/tiny.png',
},
{
name: 'Treant Protector',
image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/treant.png',
},
{
name: 'Troll Warlord',
image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/troll_warlord.png',
},
{
name: 'Tusk',
image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/tusk.png',
},
{
name: 'Underlord',
image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/abyssal_underlord.png',
},
{
name: 'Undying',
image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/undying.png',
},
{
name: 'Ursa',
image: './images/mini/ursa.png',
},
{
name: 'Vengeful Spirit',
image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/vengefulspirit.png',
},
{
name: 'Venomancer',
image: './images/mini/venomancer.png',
},
{
name: 'Viper',
image: './images/mini/viper.png',
},
{
name: 'Visage',
image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/visage.png',
},
{
name: 'Void Spirit',
image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/void_spirit.png',
},
{
name: 'Warlock',
image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/warlock.png',
},
{
name: 'Weaver',
image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/weaver.png',
},
{
name: 'Windranger',
image: './images/mini/windrunner.png',
},
{
name: 'Winter Wyvern',
image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/winter_wyvern.png',
},
{
name: 'Witch Doctor',
image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/witch_doctor.png',
},
{
name: 'Wraith King',
image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/skeleton_king.png',
},
{
name: 'Zeus',
image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/zuus.png',
},
];

const positions = [
  'Carry',
  'Offlaner',
  'Support',
  'Hard Support',
  'Midlaner',
];

const HeroPicker = () => {
  const [selectedHero, setSelectedHero] = useState(''); // Héroe seleccionado
  const [selectedPosition, setSelectedPosition] = useState(positions[0]); // Posición seleccionada
  const [counterPicks, setCounterPicks] = useState('');
  const [error, setError] = useState('');
  const [loading, setLoading] = useState(false);

  const handleHeroSelection = async () => {
    if (!selectedHero || !selectedPosition) {
      setError('Debes seleccionar un héroe y una posición.');
      return;
    }
    setError('');
    setLoading(true);

    const response = await fetch('/api/generate-hero', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ userHeroSelection: selectedHero, position: selectedPosition }),
    });

    setLoading(false);

    if (!response.ok) {
      const errorData = await response.json();
      console.error(errorData.error);
      setError(errorData.error || 'Error desconocido');
      return;
    }

    const data = await response.json();
    setCounterPicks(data.counterPicks);
  };

  return (
    <div className="p-4">
      <h2 className="block mb-4 font-semibold">Selecciona un héroe:</h2>
      <div className="hero-grid">
  {heroes.map((hero, index) => (
    <div key={index} className={`hero-card ${selectedHero === hero.name ? 'selected' : ''}`} onClick={() => setSelectedHero(hero.name)}>
      <img
        src={hero.image}
        alt={hero.name}
        className="hero-image"
      />
      <p>{hero.name}</p>
    </div>
  ))}
</div>



      {/* Selección de posición */}
      <label htmlFor="positionSelect" className="block mt-4 mb-2 font-semibold">Selecciona tu posición:</label>
      <select
        id="positionSelect"
        value={selectedPosition}
        onChange={(e) => setSelectedPosition(e.target.value)}
        className="mb-4 border rounded p-2"
      >
        {positions.map((position) => (
          <option key={position} value={position}>{position}</option>
        ))}
      </select>

      {/* Botón para obtener héroes counter */}
      <button
        onClick={handleHeroSelection}
        className="mb-4 bg-blue-500 text-white rounded p-2 hover:bg-blue-600 transition"
      >
        Obtener héroes counter
      </button>

      {/* Indicador de carga */}
      {loading && <div className="loader"></div>}

      {/* Mensajes de error */}
      {error && <p className="text-red-500">{error}</p>}

      {/* Mostrar héroes counter */}
      {counterPicks && (
        <div className="mt-4">
          <h2 className="text-lg font-semibold">Counter Pickers que te recomiendo:</h2>
          <ul className="list-disc pl-5">
            {counterPicks.split('\n').map((pick, index) => (
              <li key={index} className="mb-2">{pick.trim()}</li>
            ))}
          </ul>
        </div>
      )}
    </div>
  );
};

export default HeroPicker;


--------------------------------------------------
File End
--------------------------------------------------


C:\v2dotapicker\dota-picker-app\src\components\RecommendationItem.tsx
File type: .tsx
import React from 'react';

interface RecommendationItemProps {
  role: string;
  heroName: string;
  heroImage: string;
  reasons: string[];
}

const RecommendationItem: React.FC<RecommendationItemProps> = ({ role, heroName, heroImage, reasons }) => {
  return (
    <div className="recommendation">
      <img src={heroImage} alt={heroName} className="hero-image-suggestion" />
      <div>
        <span className="role">{role}:</span> <span className="hero-name">{heroName}</span>
        <ul className="reason-list">
          {reasons.map((reason, index) => (
            <li key={index}>{reason}</li>
          ))}
        </ul>
      </div>
    </div>
  );
};

export default RecommendationItem;

--------------------------------------------------
File End
--------------------------------------------------


C:\v2dotapicker\dota-picker-app\src\components\SynergyPicker.css
File type: .css
/* CSS actualizado para SynergyPicker */

.slot-grid {
  display: flex; /* Usar flexbox para alinear horizontalmente */
  justify-content: space-between; /* Espaciado igual entre los slots */
  margin-bottom: 1rem; /* Margen inferior entre las secciones */
}

.hero-slot {
  flex: 1; /* Cada héroe ocupará el mismo espacio */
  box-sizing: border-box; /* Asegúrate de que el padding y el margen se calculen correctamente */
  border: 2pt solid #353535;
  border-bottom: 5pt solid #353535;
  background: linear-gradient(0deg, rgb(47 47 47) 0%, rgb(21 21 24) 100%);
  text-align: center;
  padding: 20px;
  position: relative; /* Para el botón de eliminar héroe */
  cursor: pointer; /* Cambiar cursor al pasar por encima */
}

.hero-slot:last-child {
  margin-right: 0; /* Elimina el margen derecho en el último héroe */
}

.empty-slot {
  color: #888; /* Color de texto para slots vacíos */
  font-style: italic; /* Cursiva para el texto */
}

.grillaespecial {
  grid-template-columns: repeat(5, 1fr);
  display: grid;
  align-content: center;
  justify-content: center;
  align-items: center;
  justify-items: center;
  margin-bottom: 20px;
}

.hero-image-container {
  position: relative;
  width: 100%;
  height: 60px;
}

.hero-name-overlay {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  display: flex;
  justify-content: center;
  align-items: center;
  background-color: rgba(0, 0, 0, 0.7);
  color: white;
  font-size: 14px;
  opacity: 0;
  transition: opacity 0.3s;
}

.hero-card:hover .hero-name-overlay {
  opacity: 1;
}

.hero-item {
  text-align: center; /* Centrar el texto del héroe */
  cursor: grab; /* Cambiar cursor al pasar por encima */
}

.hero-item:hover {
  background: #f0f0f0; /* Fondo gris al pasar el cursor sobre un héroe */
}

.btn-submit {
  background: #007bff; /* Color de fondo del botón */
  color: white; /* Color del texto */
  border: none; /* Sin borde */
  padding: 0.5rem 1rem; /* Espaciado interno */
  border-radius: 4px; /* Bordes redondeados */
  cursor: pointer; /* Cambiar cursor al pasar por encima */
}

.suggestions {
  background: #f9f9f9; /* Fondo de las sugerencias */
  padding: 1rem; /* Espaciado interno */
  border-radius: 4px; /* Bordes redondeados */
}

@media (max-width: 768px) {
  .hero-slot {
    flex: 1 1; /* En pantallas más pequeñas, dos héroes por fila */
    padding: 10px;
  }

  .grillaespecial {
    grid-template-columns: repeat(2, 1fr);
    width: 100%;
  }

  .hero-picker-container {
    padding: 20px;
    width: -webkit-fill-available;
  }

  .hero-card {
    padding: 0px;
  }

  .hero-grid {
    gap: 0px;
  }
}

.center {
  text-align: center;
  color: #00ff00;
}

.hero-card.selected {
  filter: grayscale(100%) opacity(0.5);
  pointer-events: none;
}


.recommendation {
    display: flex;
    align-items: center;
    margin-bottom: 20px;
  }
  

  
  .role {
    font-weight: bold;
    color: #4CAF50;
  }
  
  .hero-name {
    font-weight: bold;
  }
  
  .reason-list {
    margin-left: 60px;
    color: #666;
    list-style-type: disc;
    padding-left: 20px;
  }

--------------------------------------------------
File End
--------------------------------------------------


C:\v2dotapicker\dota-picker-app\src\components\SynergyPicker.tsx
File type: .tsx
"use client";

import { useState } from 'react';
import RecommendationItem from './RecommendationItem';
import './SynergyPicker.css'; // Importa el CSS específico para este componente

interface RecommendationItemProps {
  role: string;
  heroName: string;
  heroImage: string;
  reasons: string[];
}

// Lista de héroes con su nombre y video
const heroes = [
  {
    name: 'Abaddon',
    image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/abaddon.png',
  },
  {
    name: 'Alchemist',
    image: './images/mini/alchemist.png',
  },
  {
    name: 'Ancient Apparition',
    image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/ancient_apparition.png',
  },
  {
    name: 'Anti-Mage',
    image: './images/mini/antimage.png',
  },
  {
    name: 'Arc Warden',
    image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/arc_warden.png',
  },
  {
    name: 'Axe',
    image: './images/mini/axe.png',
  },
  {
    name: 'Bane',
    image: './images/mini/bane.png',
  },
  {
    name: 'Batrider',
    image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/batrider.png',
  },
  {
    name: 'Beastmaster',
    image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/beastmaster.png',
  },
  {
    name: 'Bloodseeker',
    image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/bloodseeker.png',
  },
  {
    name: 'Bounty Hunter',
    image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/bounty_hunter.png',
  },
  {
    name: 'Brewmaster',
    image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/brewmaster.png',
  },
  {
    name: 'Bristleback',
    image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/bristleback.png',
  },
  {
    name: 'Broodmother',
    image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/broodmother.png',
  },
  {
    name: 'Centaur Warrunner',
    image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/centaur.png',
  },
  {
    name: 'Chaos Knight',
    image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/chaos_knight.png',
  },
  {
    name: 'Chen',
    image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/chen.png',
  },
  {
    name: 'Clinkz',
    image: './images/mini/clinkz.png',
  },
  {
    name: 'Clockwerk',
    image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/rattletrap.png',
  },
  {
    name: 'Crystal Maiden',
    image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/crystal_maiden.png',
  },
  {
    name: 'Dark Seer',
    image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/dark_seer.png',
  },
  {
    name: 'Dark Willow',
    image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/dark_willow.png',
  },
  {
    name: 'Dazzle',
    image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/dazzle.png',
  },
  {
    name: 'Death Prophet',
    image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/death_prophet.png',
  },
  {
    name: 'Disruptor',
    image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/disruptor.png',
  },
  {
    name: 'Doom',
    image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/doom_bringer.png',
  },
  {
    name: 'Dragon Knight',
    image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/dragon_knight.png',
  },
  {
    name: 'Drow Ranger',
    image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/drow_ranger.png',
  },
  {
    name: 'Earth Spirit',
    image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/earth_spirit.png',
  },
  {
    name: 'Earthshaker',
    image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/earthshaker.png',
  },
  {
    name: 'Elder Titan',
    image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/elder_titan.png',
  },
  {
    name: 'Ember Spirit',
    image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/ember_spirit.png',
  },
  {
    name: 'Enchantress',
    image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/enchantress.png',
  },
  {
    name: 'Enigma',
    image: './images/mini/enigma.png',
  },
  {
    name: 'Faceless Void',
    image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/faceless_void.png',
  },
  {
    name: 'Grimstroke',
    image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/grimstroke.png',
  },
  {
    name: 'Gyrocopter',
    image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/gyrocopter.png',
  },
  {
    name: 'Hoodwink',
    image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/hoodwink.png',
  },
  {
    name: 'Huskar',
    image: './images/mini/huskar.png',
  },
  {
    name: 'Invoker',
    image: './images/mini/invoker.png',
  },
  {
    name: 'Io',
    image: './images/mini/wisp.png',
  },
  {
    name: 'Jakiro',
    image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/jakiro.png',
  },
  {
    name: 'Juggernaut',
    image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/juggernaut.png',
  },
  {
    name: 'Keeper of the Light',
    image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/keeper_of_the_light.png',
  },
  {
    name: 'Kunkka',
    image: './images/mini/kunkka.png',
  },
  {
    name: 'Legion Commander',
    image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/legion_commander.png',
  },
  {
    name: 'Leshrac',
    image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/leshrac.png',
  },
  {
    name: 'Lich',
    image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/lich.png',
  },
  {
    name: 'Lifestealer',
    image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/life_stealer.png',
  },
  {
    name: 'Lina',
    image: './images/mini/lina.png',
  },
  {
    name: 'Lion',
    image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/lion.png',
  },
  {
    name: 'Lone Druid',
    image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/lone_druid.png',
  },
  {
    name: 'Luna',
    image: './images/mini/luna.png',
  },
  {
    name: 'Lycan',
    image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/lycan.png',
  },
  {
    name: 'Magnus',
    image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/magnataur.png',
  },
  {
    name: 'Marci',
    image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/marci.png',
  },
  {
    name: 'Mars',
    image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/mars.png',
  },
  {
    name: 'Medusa',
    image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/medusa.png',
  },
  {
    name: 'Meepo',
    image: './images/mini/meepo.png',
  },
  {
    name: 'Mirana',
    image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/mirana.png',
  },
  {
    name: 'Monkey King',
    image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/monkey_king.png',
  },
  {
    name: 'Morphling',
    image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/morphling.png',
  },
  {
    name: 'Muerta',
    image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/muerta.png',
  },
  {
    name: 'Naga Siren',
    image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/naga_siren.png',
  },
  {
    name: "Nature's Prophet",
    image: './images/mini/furion.png',
  },
  {
    name: 'Necrophos',
    image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/necrolyte.png',
  },
  {
    name: 'Night Stalker',
    image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/night_stalker.png',
  },
  {
    name: 'Nyx Assassin',
    image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/nyx_assassin.png',
  },
  {
    name: 'Ogre Magi',
    image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/ogre_magi.png',
  },
  {
    name: 'Omniknight',
    image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/omniknight.png',
  },
  {
    name: 'Oracle',
    image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/oracle.png',
  },
  {
    name: 'Outworld Devourer',
    image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/obsidian_destroyer.png',
  },
  {
    name: 'Pangolier',
    image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/pangolier.png',
  },
  {
    name: 'Phantom Assassin',
    image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/phantom_assassin.png',
  },
  {
    name: 'Phantom Lancer',
    image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/phantom_lancer.png',
  },
  {
    name: 'Phoenix',
    image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/phoenix.png',
  },
  {
    name: 'Primal Beast',
    image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/primal_beast.png',
},
{
name: 'Puck',
image: './images/mini/puck.png',
},
{
name: 'Pudge',
image: './images/mini/pudge.png',
},
{
name: 'Pugna',
image: './images/mini/pugna.png',
},
{
name: 'Queen of Pain',
image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/queenofpain.png',
},
{
name: 'Razor',
image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/razor.png',
},
{
name: 'Riki',
image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/riki.png',
},
{
name: 'Rubick',
image: './images/mini/rubick.png',
},
{
name: 'Sand King',
image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/sand_king.png',
},
{
name: 'Shadow Demon',
image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/shadow_demon.png',
},
{
name: 'Shadow Fiend',
image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/nevermore.png',
},
{
name: 'Shadow Shaman',
image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/shadow_shaman.png',
},
{
name: 'Silencer',
image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/silencer.png',
},
{
name: 'Skywrath Mage',
image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/skywrath_mage.png',
},
{
name: 'Slardar',
image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/slardar.png',
},
{
name: 'Slark',
image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/slark.png',
},
{
name: 'Snapfire',
image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/snapfire.png',
},
{
name: 'Sniper',
image: './images/mini/sniper.png',
},
{
name: 'Spectre',
image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/spectre.png',
},
{
name: 'Spirit Breaker',
image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/spirit_breaker.png',
},
{
name: 'Storm Spirit',
image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/storm_spirit.png',
},
{
name: 'Sven',
image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/sven.png',
},
{
name: 'Techies',
image: './images/mini/techies.png',
},
{
name: 'Templar Assassin',
image: './images/mini/templar_assassin.png',
},
{
name: 'Terrorblade',
image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/terrorblade.png',
},
{
name: 'Tidehunter',
image: './images/mini/tidehunter.png',
},
{
name: 'Timbersaw',
image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/shredder.png',
},
{
name: 'Tinker',
image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/tinker.png',
},
{
name: 'Tiny',
image: './images/mini/tiny.png',
},
{
name: 'Treant Protector',
image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/treant.png',
},
{
name: 'Troll Warlord',
image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/troll_warlord.png',
},
{
name: 'Tusk',
image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/tusk.png',
},
{
name: 'Underlord',
image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/abyssal_underlord.png',
},
{
name: 'Undying',
image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/undying.png',
},
{
name: 'Ursa',
image: './images/mini/ursa.png',
},
{
name: 'Vengeful Spirit',
image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/vengefulspirit.png',
},
{
name: 'Venomancer',
image: './images/mini/venomancer.png',
},
{
name: 'Viper',
image: './images/mini/viper.png',
},
{
name: 'Visage',
image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/visage.png',
},
{
name: 'Void Spirit',
image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/void_spirit.png',
},
{
name: 'Warlock',
image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/warlock.png',
},
{
name: 'Weaver',
image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/weaver.png',
},
{
name: 'Windranger',
image: './images/mini/windrunner.png',
},
{
name: 'Winter Wyvern',
image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/winter_wyvern.png',
},
{
name: 'Witch Doctor',
image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/witch_doctor.png',
},
{
name: 'Wraith King',
image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/skeleton_king.png',
},
{
name: 'Zeus',
image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/zuus.png',
},
];

const roles = [
  'Hard Support', 'Support', 'Midlaner', 'Carry', 'Offlaner'
];

const ranks = [
  'Heraldo', 'Guardian', 'Cruzado', 'Arconte', 'Leyenda', 'Ancestro', 'Divino', 'Inmortal'
];

const SynergyPicker = () => {
  const [allyHeroes, setAllyHeroes] = useState(Array(5).fill(null));
  const [enemyHeroes, setEnemyHeroes] = useState(Array(5).fill(null));
  const [selectedRank, setSelectedRank] = useState(ranks[0]);
  const [suggestions, setSuggestions] = useState<RecommendationItemProps[]>([]);
  const [loading, setLoading] = useState(false);
  const [selectedSlot, setSelectedSlot] = useState({ type: '', index: -1 });


  const handleDrop = (event: React.DragEvent<HTMLDivElement>, type: string, index: number) => {
    event.preventDefault();
    const heroName = event.dataTransfer.getData('heroName');
    const heroImage = event.dataTransfer.getData('heroImage');
    const hero = { name: heroName, image: heroImage };

    if (type === 'ally') {
      const newAllies = [...allyHeroes];
      newAllies[index] = hero;
      setAllyHeroes(newAllies);
    } else if (type === 'enemy') {
      const newEnemies = [...enemyHeroes];
      newEnemies[index] = hero;
      setEnemyHeroes(newEnemies);
    }
  };

  const handleDragStart = (event: React.DragEvent<HTMLDivElement>, hero: { name: string; image: string }) => {
    event.dataTransfer.setData('heroName', hero.name);
    event.dataTransfer.setData('heroImage', hero.image);
  };

  const handleRemoveHero = (type: string, index: number) => {
    if (type === 'ally') {
      const newAllies = [...allyHeroes];
      newAllies[index] = null;
      setAllyHeroes(newAllies);
    } else if (type === 'enemy') {
      const newEnemies = [...enemyHeroes];
      newEnemies[index] = null;
      setEnemyHeroes(newEnemies);
    }
  };

  const handleSlotClick = (type: string, index: number) => {
    if (selectedSlot.index === index && selectedSlot.type === type) {
      setSelectedSlot({ type: '', index: -1 }); // Deseleccionar
    } else {
      setSelectedSlot({ type, index });
    }
  };

  const isHeroSelected = (hero: { name: string; image: string }) => {
    return [...allyHeroes, ...enemyHeroes].some(selectedHero => selectedHero && selectedHero.name === hero.name);
  };

  const handleHeroClick = (hero: { name: string; image: string }) => {
    if (selectedSlot.index !== -1 && !isHeroSelected(hero)) {
      const { type, index } = selectedSlot;
      if (type === 'ally') {
        const newAllies = [...allyHeroes];
        newAllies[index] = hero;
        setAllyHeroes(newAllies);
      } else if (type === 'enemy') {
        const newEnemies = [...enemyHeroes];
        newEnemies[index] = hero;
        setEnemyHeroes(newEnemies);
      }
      setSelectedSlot({ type: '', index: -1 });
    }
  };



  const handleSubmit = async () => {
    setLoading(true);
    
    const response = await fetch('/api/generate-synergy', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        allies: allyHeroes,
        enemies: enemyHeroes,
        rank: selectedRank
      }),
    });

    setLoading(false);

    if (!response.ok) {
      // Handle error
      return;
    }

    const data = await response.json();
    const recommendationsData = parseRecommendations(data.suggestions);
    setSuggestions(recommendationsData);
  };

  const parseRecommendations = (suggestionsText: string) => {
    const recommendationPattern = /(\w+): ([\w\s]+)\. (.*?)(?=\w+:|$)/g;
    const recommendations: RecommendationItemProps[] = [];
  
    let match;
    while ((match = recommendationPattern.exec(suggestionsText)) !== null) {
      const [, role, heroName, reasonsText] = match;
      const reasons = reasonsText.split('. ').map((reason) => reason.trim());
      const heroImage = getHeroImage(heroName);
  
      recommendations.push({ role, heroName, heroImage, reasons });
    }
  
    return recommendations;
  };

  const getHeroImage = (heroName: string) => {
    const hero = heroes.find((hero) => hero.name === heroName);
    return hero ? hero.image : '';
  };

  return (
    <div className="p-4 synergy-picker">
      <h2 className="block mb-4 font-semibold">Synergy Picker</h2>
      
      {/* Espacios para aliados */}
      <div className="flex justify-start mb-4">
      <h2 className="block mb-4 font-semibold center">Heroes Aliados</h2>
        <div className="grid grid-cols-5 gap-4 grillaespecial">
          {allyHeroes.map((hero, index) => (
            <div
              key={index}
              //className="hero-slot"
              className={`hero-slot ${selectedSlot.type === 'ally' && selectedSlot.index === index ? 'selected' : ''}`}
              onDrop={(event) => handleDrop(event, 'ally', index)}
              onDragOver={(event) => event.preventDefault()}
              onClick={() => handleSlotClick('ally', index)}
            >
              <p>{roles[index]}</p>
              {hero ? (
                <div className="flex flex-col items-center">
                  <img src={hero.image} alt={hero.name} className="hero-image" />
                  <button onClick={() => handleRemoveHero('ally', index)} className="remove-hero-button">X</button>
                </div>
              ) : (
                <p className="empty-slot">Selecciona héroe</p>
              )}
            </div>
          ))}
        </div>
      </div>

      {/* Espacios para enemigos */}
      <div className="flex justify-start mb-4">
      <h2 className="block mb-4 font-semibold center">Heroes Enemigos</h2>
        <div className="grid grid-cols-5 gap-4 grillaespecial">
          {enemyHeroes.map((hero, index) => (
            <div
              key={index}
              //className="hero-slot"
              className={`hero-slot ${selectedSlot.type === 'enemy' && selectedSlot.index === index ? 'selected' : ''}`}
              onDrop={(event) => handleDrop(event, 'enemy', index)}
              onDragOver={(event) => event.preventDefault()}
              onClick={() => handleSlotClick('enemy', index)}
            >
              <p>{roles[index]}</p>
              {hero ? (
                <div className="flex flex-col items-center">
                  <img src={hero.image} alt={hero.name} className="hero-image" />
                  <button onClick={() => handleRemoveHero('enemy', index)} className="remove-hero-button">X</button>
                </div>
              ) : (
                <p className="empty-slot">Selecciona héroe</p>
              )}
            </div>
          ))}
        </div>
      </div>

      {/* Selector de héroes */}
      <div className="hero-grid">
  {heroes.map((hero, index) => (
    <div 
      key={index} 
      className={`hero-card ${isHeroSelected(hero) ? 'selected' : ''}`}
      draggable 
      onDragStart={(event) => handleDragStart(event, hero)}
      onClick={() => handleHeroClick(hero)}
    >
      <div className="hero-image-container">
        <img src={hero.image} alt={hero.name} className="hero-image" />
        <div className="hero-name-overlay">{hero.name}</div>
      </div>
    </div>
  ))}
</div>

      {/* Selector de rango */}
      <label className="block mt-4 mb-2 font-semibold">Selecciona el nivel de la medalla:</label>
      <select
        value={selectedRank}
        onChange={(e) => setSelectedRank(e.target.value)}
        className="mb-4 border rounded p-2"
      >
        {ranks.map((rank) => (
          <option key={rank} value={rank}>{rank}</option>
        ))}
      </select>

      {/* Botón para ejecutar */}
      <button
        onClick={handleSubmit}
        className="bg-blue-500 text-white rounded p-2 hover:bg-blue-600 transition"
      >
        Obtener recomendaciones
      </button>

      {/* Indicador de carga */}
      {loading && <div className="loader"></div>}

      {/* Sugerencias */}
      {suggestions.length > 0 && (
  <div className="mt-4 p-4 border rounded">
    <h3 className="font-semibold">Sugerencias:</h3>
    {suggestions.map((suggestion, index) => (
      <RecommendationItem
        key={index}
        role={suggestion.role}
        heroName={suggestion.heroName}
        heroImage={suggestion.heroImage}
        reasons={suggestion.reasons}
      />
    ))}
  </div>
)}
    </div>
  );
};

export default SynergyPicker;


--------------------------------------------------
File End
--------------------------------------------------
