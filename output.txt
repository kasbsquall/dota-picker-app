Folder Structure
--------------------------------------------------
src/
    app/
        favicon.ico
        globals.css
        layout.tsx
        page.tsx
        api/
            generate-hero/
                route.ts
            generate-items/
                route.ts
            generate-synergy/
                route.ts
        fonts/
            GeistMonoVF.woff
            GeistVF.woff
    components/
        HeroGrid.tsx
        heroList.ts
        HeroPicker.tsx
        ItemizationCalculator.css
        ItemizationCalculator.tsx
        RecommendationItem.tsx
        SynergyPicker.css
        SynergyPicker.tsx


File Contents
--------------------------------------------------


C:\v2dotapicker\dota-picker-app\src\app\globals.css
File type: .css
/* Importa la fuente Poppins desde Google Fonts */
@import url('https://fonts.googleapis.com/css2?family=Poppins:wght@400;600&display=swap');

/* Estilos generales */
body {
  background-color: #1c1c1c; /* Fondo oscuro */
  color: #ffffff; /* Texto blanco */
  font-family: 'Poppins', sans-serif; /* Nueva fuente Poppins */
  margin: 0; /* Sin margen por defecto */
  padding: 0; /* Sin padding por defecto */
  display: flex;
  flex-direction: column;
  min-height: 100vh;
}

.hero-picker-container {
  max-width: 1200px;
  margin: 20px auto; /* Centramos el contenedor */
  padding: 20px; /* Padding interno */
  background-color: rgba(50, 50, 50, 0.8); /* Fondo semi-transparente */
  border-radius: 10px; /* Bordes redondeados */
  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.2); /* Sombra del contenedor */
  display: flex;
  flex-direction: column; /* Flexbox para alinear el contenido verticalmente */
}

label {
  font-size: 18px; /* Tamaño de fuente */
  margin-bottom: 8px; /* Espaciado inferior */
}

select {
  width: 100%;
  padding: 10px;
  margin-bottom: 20px;
  border-radius: 5px;
  border: 1px solid #444;
  background-color: #333;
  color: #ffffff;
  font-size: 16px;
  transition: border-color 0.3s;
}

select:hover {
  border-color: #888;
}

.hero-name-overlay {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  display: flex;
  justify-content: center;
  align-items: center;
  background-color: rgba(0, 0, 0, 0.7);
  color: white;
  font-size: 14px;
  opacity: 0;
  transition: opacity 0.3s;
}

.hero-card:hover .hero-name-overlay {
  opacity: 1;
}

button {
  padding: 10px 20px;
  background-color: #007d00;
  color: white;
  border: none;
  border-radius: 5px;
  cursor: pointer;
  transition: background-color 0.3s;
  align-self: flex-end; /* Alinear botón a la derecha */
}

button:hover {
  background-color: #005700;
}

.loader {
  border: 4px solid rgba(255, 255, 255, 0.2);
  border-radius: 50%;
  border-top: 4px solid #007d00;
  width: 40px;
  height: 40px;
  animation: spin 1s linear infinite;
  margin: 20px auto;
  display: flex;
  justify-content: center;
  align-items: center;
}

@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}



.counter-picks {
  margin-top: 20px;
  padding: 10px;
  background-color: #2a2a2a;
  border-radius: 5px;
  line-height: 1.5;
  display: flex;
  flex-direction: column; /* Colocar elementos uno debajo del otro */
}

.counter-pick-item {
  margin-bottom: 10px;
  padding: 5px;
  background-color: #3a3a3a;
  border-radius: 3px;
  display: flex;
  justify-content: space-between;
  align-items: center; /* Alineación centrada verticalmente */
}

.counter-pick-item p {
  margin: 0;
  font-size: 16px;
}

/* Grid de héroes */
.hero-grid {
  display: grid;
  gap: 6px;
  grid-template-columns: repeat(12, minmax(90px, 1fr));
  margin-bottom: 20px;
}

.hero-card {
  background-color: rgba(27, 27, 27, 0.8);
  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.5);
  text-align: center;
  height: fit-content;
  cursor: pointer;
  transition: transform 0.2s, border 0.2s;
  flex-direction: column; /* Contenido de la tarjeta alineado en columna */
  justify-content: space-between; /* Distribuye el espacio entre los elementos */
}

.hero-card:hover {
  transform: scale(1.05);
}

.selected {
  border: 2px solid #00ff00 !important;
}

.hero-name {
  font-size: 18px;
  margin-bottom: 10px;
  color: #ffffff;
}

.hero-image {
  width: 100%;
  height: 60px;
  object-fit: cover;
}

@media (max-width: 600px) {
  .hero-grid {
    grid-template-columns: repeat(5, 1fr); /* 2 columnas en pantallas pequeñas */
  }

  .hero-name {
    font-size: 14px;
  }

  .hero-image-container {
    height: 40px !important;
  }

  .hero-image {
    width: 100%;
    height: 40px;
    object-fit: cover;
  }
}

.flexbloque{
  gap: 20px;
  display: flex;
}

.hero-card p{
  margin-block-start: 4px;
  text-overflow: ellipsis;
  overflow-wrap: break-word;
  margin-block-end: 4px;
}


html {
  scroll-behavior: smooth;
}

.suggestions-container {
  scroll-margin-top: 20px; /* Añade un pequeño margen al scroll para mejor visibilidad */
}

/* Añade estos estilos a tu globals.css */
.hero-grid-wrapper {
  will-change: max-height, opacity;
}

.collapse-button {
  background-color: rgba(75, 85, 99, 0.3);
  padding: 0.5rem 1rem;
  border-radius: 0.375rem;
  font-size: 0.875rem;
  display: flex;
  align-items: center;
  width: fit-content;
}

.collapse-button:hover {
  background-color: rgba(75, 85, 99, 0.5);
}

/* Añade estos estilos a tu globals.css */

.grid-expanded {
  max-height: 2000px; /* Ajusta este valor según el tamaño de tu grid */
  opacity: 1;
  margin-bottom: 1rem;
  visibility: visible;
}

.grid-collapsed {
  max-height: 0;
  opacity: 0;
  margin-bottom: 0;
  visibility: hidden;
  overflow: hidden;
}

.collapse-button {
  background-color: rgba(75, 85, 99, 0.3);
  padding: 0.5rem 1rem;
  border-radius: 0.375rem;
  font-size: 0.875rem;
  display: flex;
  gap: 10px;
  align-items: center;
  width: fit-content;
  cursor: pointer;
}

.collapse-button svg{
  width: 30px;
  height: 30px;
}

.collapse-button:hover {
  background-color: rgba(75, 85, 99, 0.5);
}

/* Asegúrate de que .hero-grid mantenga estos estilos */
.hero-grid {
  display: grid;
  gap: 6px;
  grid-template-columns: repeat(auto-fill, minmax(90px, 1fr));
}

/* Ajusta la transición para que sea más suave */
.hero-grid-container > div {
  transition-property: all;
  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
  transition-duration: 300ms;
}

.selected-hero-display{
  margin-top: 20px;
}

.hero-grid-container{
  margin-bottom: 20px;
}

--------------------------------------------------
File End
--------------------------------------------------


C:\v2dotapicker\dota-picker-app\src\app\layout.tsx
File type: .tsx
import type { Metadata } from "next";
import localFont from "next/font/local";
import "./globals.css";

const geistSans = localFont({
  src: "./fonts/GeistVF.woff",
  variable: "--font-geist-sans",
  weight: "100 900",
});
const geistMono = localFont({
  src: "./fonts/GeistMonoVF.woff",
  variable: "--font-geist-mono",
  weight: "100 900",
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        {children}
      </body>
    </html>
  );
}


--------------------------------------------------
File End
--------------------------------------------------


C:\v2dotapicker\dota-picker-app\src\app\page.tsx
File type: .tsx
"use client";

import HeroPicker from '@/components/HeroPicker';
import SynergyPicker from '@/components/SynergyPicker';
import ItemizationCalculator from '@/components/ItemizationCalculator';
import { useState } from 'react';

export default function Home() {
  const [tool, setTool] = useState<'counter' | 'synergy' | 'itemization' | null>(null);

  const handleBack = () => {
    setTool(null);
  };

  return (
    <div className="hero-picker-container flex flex-col items-center justify-center min-h-screen">
      {!tool ? (
        <>
          <h1 className="text-5xl font-bold mb-4 text-white">¡Bienvenido a Dota Picker!</h1>
          <p className="text-lg mb-6 text-center">Selecciona una herramienta para mejorar tu estrategia.</p>
          <div className="flex space-x-4 flexbloque">
            <button 
              className="bg-blue-500 text-white rounded p-4 hover:bg-blue-600 transition" 
              onClick={() => setTool('counter')}
            >
              Counter Picker
            </button>
            <button 
              className="bg-green-500 text-white rounded p-4 hover:bg-green-600 transition" 
              onClick={() => setTool('synergy')}
            >
              Synergy Picker
            </button>
            <button 
              className="bg-purple-500 text-white rounded p-4 hover:bg-purple-600 transition" 
              onClick={() => setTool('itemization')}
            >
              Calculadora de Items
            </button>
          </div>
        </>
      ) : (
        <div className="w-full">
          <div className="back-button-container">
            <button onClick={handleBack} className="back-button">
              <svg 
                xmlns="http://www.w3.org/2000/svg" 
                viewBox="0 0 24 24"
                className="back-arrow"
                fill="none" 
                stroke="currentColor" 
                strokeWidth="2"
              >
                <path 
                  strokeLinecap="round" 
                  strokeLinejoin="round" 
                  d="M10.5 19.5L3 12m0 0l7.5-7.5M3 12h18" 
                />
              </svg>
              Volver
            </button>
          </div>
          
          {tool === 'counter' && <HeroPicker />}
          {tool === 'synergy' && <SynergyPicker />}
          {tool === 'itemization' && <ItemizationCalculator />}
        </div>
      )}
    </div>
  );
}

--------------------------------------------------
File End
--------------------------------------------------


C:\v2dotapicker\dota-picker-app\src\app\api\generate-hero\route.ts
File type: .ts
// src/app/api/generate-hero/route.ts
import { NextResponse } from 'next/server';
import OpenAI from 'openai';

const openai = new OpenAI({
  apiKey: process.env.NEXT_PUBLIC_OPENAI_API_KEY,
});

export async function POST(req: Request) {

   
   const headers = {
        'Access-Control-Allow-Origin': '*', // O especifica tu dominio si es necesario
        'Access-Control-Allow-Methods': 'POST',
        'Content-Type': 'application/json',
      }; 
    
  const { userHeroSelection, position } = await req.json();

  // Solicitar la respuesta en español con información breve
  const prompt = `Eres un Profesional de Dota 2. Dame los 3 mejores héroes para counterpickear en la meta actual a ${userHeroSelection} que sean solo unicamente heroes de la posición de ${position} en Dota 2. Proporciona cada opción en una línea separada y usa descripciones breves para que no se corten las respuestas.`;

  try {
    const response = await openai.chat.completions.create({
      model: 'gpt-3.5-turbo',
      messages: [{ role: 'user', content: prompt }],
      max_tokens: 150,
      temperature: 0.0, // Ajustar la temperatura para respuestas más controladas
    });

    const counterPicks = response.choices?.[0]?.message.content?.trim() || 'Sin héroes seleccionados';
    
    // Asegurarse de que se devuelven exactamente 3 héroes
    const picksArray = counterPicks.split('\n').map(pick => pick.trim()).filter(pick => pick);
    const finalPicks = picksArray.length >= 3 ? picksArray.slice(0, 3) : picksArray;

    return new NextResponse(JSON.stringify({ counterPicks: finalPicks.join('\n') }), { headers });
  } catch (error) {
    console.error('Error en OpenAI:', error);
    return new NextResponse(JSON.stringify({ error: 'Error en la generación de héroes. ' }), { status: 500, headers });
  }
}

--------------------------------------------------
File End
--------------------------------------------------


C:\v2dotapicker\dota-picker-app\src\app\api\generate-items\route.ts
File type: .ts
// src/app/api/generate-items/route.ts
import { NextResponse } from 'next/server';
import OpenAI from 'openai';

interface Hero {
  name: string;
  role: string;
  image: string;
}

interface Item {
  name: string;
  reason: string;
  image: string;
}

interface ItemBuild {
  title: string;
  description: string;
  items: {
    early: Item[];
    mid: Item[];
    late: Item[];
  };
}

interface ItemRecommendations {
  builds: ItemBuild[];
}

// Define el tipo para el objeto itemImages
type ItemImageDictionary = {
  [key: string]: string;
}

const openai = new OpenAI({
  apiKey: process.env.NEXT_PUBLIC_OPENAI_API_KEY,
});

const itemImages: ItemImageDictionary = {
    'Abyssal Blade': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/3/3b/Abyssal_Blade_icon.png',
    'Aegis of the Immortal': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/2/20/Aegis_of_the_Immortal_icon.png',
'Aeon Disk': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/2/2b/Aeon_Disk_icon.png',
'Aether Lens': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/d/d4/Aether_Lens_icon.png',
"Aghanim's Blessing (Roshan)": "https://static.wikia.nocookie.net/dota2_gamepedia/images/4/43/Aghanim%27s_Blessing_-_Roshan_icon.png",
"Aghanim's Blessing": "https://static.wikia.nocookie.net/dota2_gamepedia/images/2/24/Aghanim%27s_Blessing_icon.png",
"Aghanim's Scepter (2020 Summer 1)": "https://static.wikia.nocookie.net/dota2_gamepedia/images/c/c3/Aghanim%27s_Scepter_%282020_Summer_Event%29_1_icon.png",
"Aghanim's Scepter (2020 Summer 2)": "https://static.wikia.nocookie.net/dota2_gamepedia/images/5/53/Aghanim%27s_Scepter_%282020_Summer_Event%29_2_icon.png",
"Aghanim's Scepter": "https://static.wikia.nocookie.net/dota2_gamepedia/images/0/07/Aghanim%27s_Scepter_icon.png",
"Aghanim's Shard (Roshan)": "https://static.wikia.nocookie.net/dota2_gamepedia/images/6/65/Aghanim%27s_Shard_-_Roshan_icon.png",
"Aghanim's Shard": "https://static.wikia.nocookie.net/dota2_gamepedia/images/d/d8/Aghanim%27s_Shard_icon.png",
"Animal Courier (Dire)": "https://static.wikia.nocookie.net/dota2_gamepedia/images/b/b5/Animal_Courier_%28Dire%29_icon.png",
'Animal Courier (Radiant)': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/1/1c/Animal_Courier_%28Radiant%29_icon.png',
'Arcane Blink': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/2/28/Arcane_Blink_icon.png',
'Arcane Boots': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/b/be/Arcane_Boots_icon.png',
'Armlet of Mordiggian (Active)': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/a/a1/Armlet_of_Mordiggian_%28Active%29_icon.png',
'Armlet of Mordiggian (Inactive)': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/8/8d/Armlet_of_Mordiggian_%28Inactive%29_icon.png',
'Assault Cuirass': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/d/d3/Assault_Cuirass_icon.png',
'Banana': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/4/47/Banana_icon.png',
'Band of Elvenskin': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/c/ca/Band_of_Elvenskin_icon.png',
'Battle Fury': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/c/c1/Battle_Fury_icon.png',
'Belt of Strength': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/f/f6/Belt_of_Strength_icon.png',
'Black King Bar': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/7/72/Black_King_Bar_icon.png',
'Blade Mail': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/1/18/Blade_Mail_icon.png',
'Blade of Alacrity': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/a/a2/Blade_of_Alacrity_icon.png',
'Blades of Attack': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/e/ed/Blades_of_Attack_icon.png',
'Blight Stone': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/9/98/Blight_Stone_icon.png',
'Blink Dagger': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/4/4c/Blink_Dagger_icon.png',
'Blitz Knuckles': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/8/8c/Blitz_Knuckles_icon.png',
'Bloodstone': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/5/5a/Bloodstone_icon.png',
'Bloodthorn': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/f/f4/Bloodthorn_icon.png',
'Boots of Speed': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/9/97/Boots_of_Speed_icon.png',
'Boots of Travel 1': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/6/6d/Boots_of_Travel_1_icon.png',
'Boots of Travel 2': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/e/eb/Boots_of_Travel_2_icon.png',
'Bottle (Amplify Damage)': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/4/44/Bottle_%28Amplify_Damage%29_icon.png',
'Bottle (Arcane)': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/1/1c/Bottle_%28Arcane%29_icon.png',
'Bottle (Bounty)': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/c/ce/Bottle_%28Bounty%29_icon.png',
'Bottle (Empty)': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/e/e8/Bottle_%28Empty%29_icon.png',
'Bottle (Full)': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/f/fa/Bottle_%28Full%29_icon.png',
'Bottle (Haste)': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/f/f1/Bottle_%28Haste%29_icon.png',
'Bottle (Illusion)': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/f/fa/Bottle_%28Illusion%29_icon.png',
'Bottle (Invisibility)': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/f/f4/Bottle_%28Invisibility%29_icon.png',
'Bottle (Medium)': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/5/53/Bottle_%28Medium%29_icon.png',
'Bottle (Regeneration)': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/c/c4/Bottle_%28Regeneration%29_icon.png',
'Bottle (Shield)': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/7/7f/Bottle_%28Shield%29_icon.png',
'Bottle (Small)': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/7/71/Bottle_%28Small%29_icon.png',
'Bottle (Water)': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/a/a6/Bottle_%28Water%29_icon.png',
'Bottle (Wisdom)': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/b/b2/Bottle_%28Wisdom%29_icon.png',
'Bracer': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/6/6e/Bracer_icon.png',
'Broadsword': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/3/3e/Broadsword_icon.png',
'Buckler (Active)': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/e/ed/Buckler_%28Active%29_icon.png',
'Buckler (Inactive)': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/a/ae/Buckler_%28Inactive%29_icon.png',
'Butterfly': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/2/28/Butterfly_icon.png',
'Chainmail': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/f/f2/Chainmail_icon.png',
'Cheese': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/5/51/Cheese_icon.png',
'Circlet': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/2/28/Circlet_icon.png',
'Clarity': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/7/77/Clarity_icon.png',
'Claymore': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/4/49/Claymore_icon.png',
'Cloak': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/2/21/Cloak_icon.png',
'Crimson Guard': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/7/70/Crimson_Guard_icon.png',
'Crown': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/4/46/Crown_icon.png',
'Crystalys': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/3/3f/Crystalys_icon.png',
'Daedalus': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/2/24/Daedalus_icon.png',
'Dagon 1': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/b/bc/Dagon_1_icon.png',
'Dagon 2': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/f/ff/Dagon_2_icon.png',
'Dagon 3': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/9/99/Dagon_3_icon.png',
'Dagon 4': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/e/e3/Dagon_4_icon.png',
'Dagon 5': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/7/70/Dagon_5_icon.png',
'Demon Edge': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/b/ba/Demon_Edge_icon.png',
'Desolator': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/8/84/Desolator_icon.png',
'Diffusal Blade 1': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/6/65/Diffusal_Blade_1_icon.png',
'Diffusal Blade 2': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/5/55/Diffusal_Blade_2_icon.png',
'Divine Rapier': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/b/b1/Divine_Rapier_icon.png',
'Dragon Lance': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/d/db/Dragon_Lance_icon.png',
'Drum of Endurance': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/9/91/Drum_of_Endurance_icon.png',
'Dust of Appearance': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/e/ed/Dust_of_Appearance_icon.png',
'Eaglesong': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/9/9a/Eaglesong_icon.png',
'Echo Sabre': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/6/6b/Echo_Sabre_icon.png',
'Enchanted Mango': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/7/70/Enchanted_Mango_icon.png',
'Energy Booster': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/7/72/Energy_Booster_icon.png',
'Eternal Shroud': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/c/c5/Eternal_Shroud_icon.png',
'Ethereal Blade': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/5/5b/Ethereal_Blade_icon.png',
"Eul's Scepter of Divinity": "https://static.wikia.nocookie.net/dota2_gamepedia/images/8/80/Eul%27s_Scepter_of_Divinity_icon.png",
'Eye of Skadi': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/1/1e/Eye_of_Skadi_icon.png',
'Faerie Fire': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/5/54/Faerie_Fire_icon.png',
'Falcon Blade': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/4/4a/Falcon_Blade_icon.png',
'Fluffy Hat': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/b/b5/Fluffy_Hat_icon.png',
'Flying Courier (Dire)': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/7/76/Flying_Courier_%28Dire%29_icon.png',
'Flying Courier (Radiant)': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/d/d7/Flying_Courier_%28Radiant%29_icon.png',
'Force Staff': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/a/a2/Force_Staff_icon.png',
'Gauntlets of Strength': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/8/88/Gauntlets_of_Strength_icon.png',
'Gem of True Sight': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/1/1d/Gem_of_True_Sight_icon.png',
'Ghost Scepter': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/9/9d/Ghost_Scepter_icon.png',
'Gleipnir': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/5/5d/Gleipnir_icon.png',
'Glimmer Cape': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/c/ce/Glimmer_Cape_icon.png',
'Gloves of Haste': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/1/16/Gloves_of_Haste_icon.png',
'Guardian Greaves': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/9/94/Guardian_Greaves_icon.png',
'Hand of Midas': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/5/5b/Hand_of_Midas_icon.png',
'Headdress': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/0/03/Headdress_icon.png',
'Healing Salve': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/3/36/Healing_Salve_icon.png',
'Heart of Tarrasque': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/7/75/Heart_of_Tarrasque_icon.png',
"Heaven's Halberd": "https://static.wikia.nocookie.net/dota2_gamepedia/images/c/c6/Heaven%27s_Halberd_icon.png",
'Helm of Iron Will': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/f/f6/Helm_of_Iron_Will_icon.png',
'Helm of the Dominator': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/9/97/Helm_of_the_Dominator_icon.png',
'Helm of the Overlord': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/f/f8/Helm_of_the_Overlord_icon.png',
'Holy Locket': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/4/48/Holy_Locket_icon.png',
'Hood of Defiance': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/a/ad/Hood_of_Defiance_icon.png',
'Hurricane Pike': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/1/13/Hurricane_Pike_icon.png',
'Hyperstone': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/6/6a/Hyperstone_icon.png',
'Infused Raindrops': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/d/d2/Infused_Raindrops_icon.png',
'Iron Branch': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/a/a3/Iron_Branch_icon.png',
'Javelin': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/e/ed/Javelin_icon.png',
'Kaya and Sange': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/6/67/Kaya_and_Sange_icon.png',
'Kaya': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/6/65/Kaya_icon.png',
"Linken's Sphere": "https://static.wikia.nocookie.net/dota2_gamepedia/images/2/23/Linken%27s_Sphere_icon.png",
'Lotus Orb': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/c/c8/Lotus_Orb_icon.png',
'Maelstrom': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/6/65/Maelstrom_icon.png',
'Mage Slayer': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/1/18/Mage_Slayer_icon.png',
'Magic Stick': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/5/59/Magic_Stick_icon.png',
'Magic Wand': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/7/74/Magic_Wand_icon.png',
'Manta Style': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/8/84/Manta_Style_icon.png',
'Mantle of Intelligence': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/c/cf/Mantle_of_Intelligence_icon.png',
'Mask of Madness': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/7/76/Mask_of_Madness_icon.png',
'Medallion of Courage': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/d/d9/Medallion_of_Courage_icon.png',
'Mekansm': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/f/f7/Mekansm_icon.png',
'Meteor Hammer': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/5/54/Meteor_Hammer_icon.png',
'Mithril Hammer': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/d/d5/Mithril_Hammer_icon.png',
'Mjollnir': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/9/9d/Mjollnir_icon.png',
'Monkey King Bar': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/b/b0/Monkey_King_Bar_icon.png',
'Moon Shard': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/2/21/Moon_Shard_icon.png',
'Morbid Mask': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/7/76/Morbid_Mask_icon.png',
'Mystic Staff': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/2/29/Mystic_Staff_icon.png',
'Necronomicon 1': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/3/30/Necronomicon_1_icon.png',
'Necronomicon 2': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/1/1c/Necronomicon_2_icon.png',
'Necronomicon 3': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/2/25/Necronomicon_3_icon.png',
'Null Talisman': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/9/90/Null_Talisman_icon.png',
'Nullifier': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/b/bc/Nullifier_icon.png',
'Oblivion Staff': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/7/7b/Oblivion_Staff_icon.png',
'Observer and Sentry Wards 1': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/1/13/Observer_and_Sentry_Wards_1_icon.png',
'Observer and Sentry Wards 2': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/5/5c/Observer_and_Sentry_Wards_2_icon.png',
'Observer Ward': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/f/f6/Observer_Ward_icon.png',
'Octarine Core': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/1/13/Octarine_Core_icon.png',
'Ogre Axe': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/d/dd/Ogre_Axe_icon.png',
'Orb of Corrosion': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/9/97/Orb_of_Corrosion_icon.png',
'Orb of Venom': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/3/35/Orb_of_Venom_icon.png',
'Orchid Malevolence': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/a/ad/Orchid_Malevolence_icon.png',
'Overwhelming Blink': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/6/6d/Overwhelming_Blink_icon.png',
'Perseverance': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/f/fb/Perseverance_icon.png',
'Phase Boots': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/9/98/Phase_Boots_icon.png',
'Pipe of Insight': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/7/76/Pipe_of_Insight_icon.png',
'Platemail': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/4/4f/Platemail_icon.png',
'Point Booster': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/5/57/Point_Booster_icon.png',
'Power Treads (Agility Colorblind)': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/6/6b/Power_Treads_%28Agility_Colorblind%29_icon.png',
'Power Treads (Agility)': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/9/95/Power_Treads_%28Agility%29_icon.png',
'Power Treads (Intelligence)': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/d/d5/Power_Treads_%28Intelligence%29_icon.png',
'Power Treads (Strength)': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/8/8a/Power_Treads_%28Strength%29_icon.png',
'Power Treads': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/6/6b/Power_Treads_icon.png',
'Quarterstaff': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/1/13/Quarterstaff_icon.png',
'Quelling Blade': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/9/94/Quelling_Blade_icon.png',
'Radiance (Active)': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/d/df/Radiance_%28Active%29_icon.png',
'Radiance (Inactive)': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/8/85/Radiance_%28Inactive%29_icon.png',
'Reaver': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/3/37/Reaver_icon.png',
'Refresher Orb': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/e/e2/Refresher_Orb_icon.png',
"Revenant's Brooch": "https://static.wikia.nocookie.net/dota2_gamepedia/images/3/37/Revenant%27s_Brooch_icon.png",
'Ring of Basilius (Active)': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/2/26/Ring_of_Basilius_%28Active%29_icon.png',
'Ring of Basilius (Inactive)': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/9/9e/Ring_of_Basilius_%28Inactive%29_icon.png',
'Ring of Health': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/2/29/Ring_of_Health_icon.png',
'Ring of Protection': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/3/3b/Ring_of_Protection_icon.png',
'Ring of Regen': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/6/6d/Ring_of_Regen_icon.png',
'Ring of Tarrasque': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/7/78/Ring_of_Tarrasque_icon.png',
'Robe of the Magi': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/b/b3/Robe_of_the_Magi_icon.png',
'Rod of Atos': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/6/66/Rod_of_Atos_icon.png',
'Sacred Relic': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/7/7c/Sacred_Relic_icon.png',
"Sage's Mask": "https://static.wikia.nocookie.net/dota2_gamepedia/images/c/c6/Sage%27s_Mask_icon.png",
'Sange and Yasha': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/b/b4/Sange_and_Yasha_icon.png',
'Sange': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/f/fc/Sange_icon.png',
'Satanic': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/d/dd/Satanic_icon.png',
'Scythe of Vyse': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/5/54/Scythe_of_Vyse_icon.png',
'Sentry Ward': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/3/3e/Sentry_Ward_icon.png',
'Shadow Amulet': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/0/07/Shadow_Amulet_icon.png',
'Shadow Blade': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/0/0f/Shadow_Blade_icon.png',
"Shiva's Guard": "https://static.wikia.nocookie.net/dota2_gamepedia/images/b/b6/Shiva%27s_Guard_icon.png",
'Silver Edge': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/9/91/Silver_Edge_icon.png',
'Skull Basher': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/9/9d/Skull_Basher_icon.png',
'Slippers of Agility': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/5/5c/Slippers_of_Agility_icon.png',
'Smoke of Deceit': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/0/04/Smoke_of_Deceit_icon.png',
'Solar Crest': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/3/36/Solar_Crest_icon.png',
'Soul Booster': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/2/2f/Soul_Booster_icon.png',
'Soul Ring': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/a/a6/Soul_Ring_icon.png',
'Spirit Vessel': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/2/2a/Spirit_Vessel_icon.png',
'Staff of Wizardry': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/8/8a/Staff_of_Wizardry_icon.png',
'Swift Blink': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/4/47/Swift_Blink_icon.png',
'Talisman of Evasion': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/3/37/Talisman_of_Evasion_icon.png',
'Tango (Shared)': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/0/06/Tango_%28Shared%29_icon.png',
'Tango': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/f/fd/Tango_icon.png',
'Tome of Knowledge': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/f/fc/Tome_of_Knowledge_icon.png',
'Town Portal Scroll': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/4/46/Town_Portal_Scroll_icon.png',
'Tranquil Boots (Active)': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/2/23/Tranquil_Boots_%28Active%29_icon.png',
'Tranquil Boots (Inactive)': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/5/50/Tranquil_Boots_%28Inactive%29_icon.png',
'Ultimate Orb': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/1/14/Ultimate_Orb_icon.png',
'Urn of Shadows': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/5/58/Urn_of_Shadows_icon.png',
'Vanguard': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/a/ab/Vanguard_icon.png',
'Veil of Discord': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/f/f2/Veil_of_Discord_icon.png',
'Vitality Booster': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/1/1c/Vitality_Booster_icon.png',
"Vladmir's Offering": "https://static.wikia.nocookie.net/dota2_gamepedia/images/2/28/Vladmir%27s_Offering_icon.png",
'Void Stone': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/6/6b/Void_Stone_icon.png',
'Voodoo Mask': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/6/60/Voodoo_Mask_icon.png',
'Wind Lace': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/9/91/Wind_Lace_icon.png',
'Wind Waker': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/9/90/Wind_Waker_icon.png',
'Witch Blade': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/6/68/Witch_Blade_icon.png',
'Wraith Band': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/5/55/Wraith_Band_icon.png',
'Yasha and Kaya': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/1/19/Yasha_and_Kaya_icon.png',
'Yasha': 'https://static.wikia.nocookie.net/dota2_gamepedia/images/d/d1/Yasha_icon.png'
} as const;

// Función auxiliar para obtener la URL de la imagen de forma segura
function getItemImageUrl(itemName: string): string {
  const imageUrl = itemImages[itemName];
  return imageUrl || '/api/placeholder/64/64'; // URL por defecto si no se encuentra la imagen
}

export async function POST(req: Request) {
  try {
    const { hero, enemies } = await req.json();

    if (!hero?.name || !hero?.role) {
      return NextResponse.json(
        { error: 'Hero name and role are required' },
        { status: 400 }
      );
    }

    if (!Array.isArray(enemies) || enemies.some((e: Hero | null) => e !== null && (!e.name || !e.role))) {
      return NextResponse.json(
        { error: 'Enemies must be an array of valid heroes' },
        { status: 400 }
      );
    }

    const enemyNames = enemies
      .filter((e: Hero | null) => e !== null)
      .map((e: Hero) => e.name)
      .join(', ');

      const prompt = `Como analista profesional de alto nivel de Dota 2, proporciona una única build óptima y refinada para ${hero.name} jugando como ${hero.role}.
      ${enemyNames ? `Necesitas contrarrestar específicamente a: ${enemyNames}` : 'Sin héroes enemigos seleccionados.'}
      
      Considera los siguientes factores para la itemización:
      - La meta actual del ultimo parche
      - Contrapicks y sinergias específicas contra el equipo enemigo
      - Timings de poder del héroe
      - Objetivos en cada fase del juego
      - Eficiencia en la progresión de items
      
      Proporciona la build en este formato JSON:
      
      {
        "builds": [
          {
            "title": "Build Óptima ${hero.name}",
            "description": "Explicación concisa de la estrategia y objetivos principales de la build",
            "items": {
              "early": [
                {
                  "name": "NOMBRE_EXACTO_DEL_ITEM",
                  "reason": "Justificación estratégica del item (máximo 100 caracteres)"
                }
              ],
              "mid": [],
              "late": []
            }
          }
        ]
      }
      
      IMPORTANTE:
      1. La build debe maximizar el potencial de ${hero.name} contra la composición enemiga
      2. Solo considerar items de la meta actual
      3. Usar solo estos nombres exactos de items: ${Object.keys(itemImages).join(', ')}`;

const response = await openai.chat.completions.create({
  model: 'gpt-3.5-turbo',
  messages: [{ role: 'user', content: prompt }],
  temperature: 0.7,
  max_tokens: 1000,
});

const content = response.choices[0].message.content;
if (!content) {
  throw new Error('No se recibió respuesta del modelo');
}

try {
  const recommendations: ItemRecommendations = JSON.parse(content);

  // Procesar las recomendaciones usando la función auxiliar
  const processedBuilds = recommendations.builds.map(build => ({
    ...build,
    items: {
      early: build.items.early.map(item => ({
        ...item,
        image: getItemImageUrl(item.name)
      })),
      mid: build.items.mid.map(item => ({
        ...item,
        image: getItemImageUrl(item.name)
      })),
      late: build.items.late.map(item => ({
        ...item,
        image: getItemImageUrl(item.name)
      }))
    }
  }));

  return NextResponse.json({ builds: processedBuilds });
} catch (parseError) {
  console.error('Error al parsear la respuesta:', parseError);
  throw new Error('Error al procesar las recomendaciones de items');
}
} catch (error) {
console.error('Error en generate-items:', error);
const errorMessage = error instanceof Error ? error.message : 'Unknown error';
return NextResponse.json(
  { error: `Error generating item recommendations: ${errorMessage}` },
  { status: 500 }
);
}
}

--------------------------------------------------
File End
--------------------------------------------------


C:\v2dotapicker\dota-picker-app\src\app\api\generate-synergy\route.ts
File type: .ts
import { NextResponse, NextRequest } from "next/server";
import OpenAI from "openai";

const openai = new OpenAI({
  apiKey: process.env.NEXT_PUBLIC_OPENAI_API_KEY,
});

// Define un tipo para el héroe
type Hero = {
  name: string;
  role?: string;
};

export async function POST(request: NextRequest) {
  const { allies, enemies, rank } = await request.json();

  // Definición de roles
  const roles: string[] = [
    "Hard Support",
    "Support",
    "Midlaner",
    "Carry",
    "Offlaner",
  ];

  // Identificar roles faltantes en aliados
  const filledRoles: (string | null)[] = allies.map(
    (hero: Hero, index: number) => (hero ? roles[index] : null)
  );

  // Aquí se agrega el tipo 'string' al parámetro role
  const missingRoles = roles.filter(
    (role: string) => !filledRoles.includes(role)
  );

  /*
  // Generar el prompt basado en los héroes seleccionados y los roles faltantes
  const prompt = `Eres un analista profesional de sinergia de héroes de Dota 2. Aquí tienes una lista de héroes: 
  Aliados: ${allies.map((a: Hero) => a?.name).join(', ')}, 
  Enemigos: ${enemies.map((e: Hero) => e?.name).join(', ')}, 
  Nivel de medalla de la partida: ${rank}. 
  Los roles que faltan en aliados son: ${missingRoles.join(', ')}. 
  No recomiendes héroes que ya están presentes en Aliados o Enemigos. 
  Si el usuario no coloco ningún heroe Enemigos entonces solo da una respuesta en base a la mejor sinergia y combo de equipo.
  Da una respuesta directa y profesional del héroe más adecuado por cada rol faltante en base a sinergia y contra pickear a los enemigos.`;
  */

  /*
  const prompt = `Eres un analista profesional de Dota 2 especializado en estrategias y sinergia de héroes. Dados los siguientes héroes:
Aliados: ${allies.map((a: Hero) => a?.name).join(", ")}
Enemigos: ${enemies.map((e: Hero) => e?.name).join(", ")}
Nivel de medalla de la partida: ${rank}

Los roles faltantes en el equipo aliado son: ${missingRoles.join(", ")}.

Proporciona recomendaciones concisas y directas del mejor héroe para cada rol faltante, considerando lo siguiente:
- Sinergia y combos efectivos con los héroes aliados existentes.
- Habilidad para contrarrestar y enfrentar a los héroes enemigos.
- Viabilidad y eficacia en la meta actual del nivel de medalla especificado.

Evita recomendar héroes que ya estén presentes en ambos equipos.

Si no se proporcionaron héroes enemigos, enfoca tu respuesta únicamente en la mejor sinergia y combos con los héroes aliados.

Limita tu respuesta a un máximo de 50 palabras por recomendación para cada rol. La claridad y la precisión son esenciales.`;
*/

const prompt = `Eres un analista profesional de Dota 2 especializado en estrategias y sinergia de héroes. Dados los siguientes héroes:
Aliados: ${allies.map((a: Hero) => a?.name).join(", ")}
Enemigos: ${enemies.map((e: Hero) => e?.name).join(", ")}
Nivel de medalla de la partida: ${rank}

Los roles faltantes en el equipo aliado son: ${missingRoles.join(", ")}.

IMPORTANTE: Sigue EXACTAMENTE este formato para cada recomendación:

Para cada rol faltante, proporciona una recomendación usando EXACTAMENTE este formato:

[ROL]: [HÉROE]
- [RAZÓN 1]
- [RAZÓN 2]
- [RAZÓN 3]

NO pongas el nombre del héroe en una nueva línea, debe estar en la misma línea que el rol.

Proporciona una recomendación para CADA rol faltante, considerando:
- Sinergia y combos efectivos con los héroes aliados existentes
- Habilidad para contrarrestar y enfrentar a los héroes enemigos
- Viabilidad y eficacia en la meta actual del nivel de medalla especificado

Evita recomendar héroes que ya estén presentes en ambos equipos.

Si no se proporcionaron héroes enemigos, enfoca tu respuesta únicamente en la mejor sinergia y combos con los héroes aliados.

Limita tu respuesta a un máximo de 50 palabras por recomendación para cada rol obligatoriamente. La claridad y la precisión son esenciales.`;


  const response = await openai.chat.completions.create({
    model: "gpt-3.5-turbo",
    messages: [{ role: "user", content: prompt }],
    max_tokens: 300,
    temperature: 0.0,
  });

  const suggestions = response.choices[0].message.content;

  return NextResponse.json({ suggestions });
}


--------------------------------------------------
File End
--------------------------------------------------


C:\v2dotapicker\dota-picker-app\src\components\HeroGrid.tsx
File type: .tsx
// src/components/HeroGrid.tsx
import { useState } from 'react';
import Image from 'next/image';
import heroes from './heroList';

interface Hero {
  name: string;
  image: string;
}

interface HeroGridProps {
  onHeroSelect: (hero: Hero) => void;
  selectedHeroes: (Hero | null)[];
  onDragStart?: (event: React.DragEvent<HTMLDivElement>, hero: Hero) => void;
}

const HeroGrid = ({ onHeroSelect, selectedHeroes, onDragStart }: HeroGridProps) => {
  const [isExpanded, setIsExpanded] = useState(true);

  const isHeroSelected = (hero: Hero) => {
    return selectedHeroes.some(
      selectedHero => selectedHero && selectedHero.name === hero.name
    );
  };

  return (
    <div className="hero-grid-container">
      <button
        onClick={() => setIsExpanded(!isExpanded)}
        className="collapse-button flex items-center gap-2 mb-4 text-gray-300 hover:text-white transition-colors"
      >
        <svg
          xmlns="http://www.w3.org/2000/svg"
          className={`w-4 h-4 transition-transform duration-200 ${isExpanded ? 'rotate-180' : ''}`}
          fill="none"
          viewBox="0 0 24 24"
          stroke="currentColor"
        >
          <path
            strokeLinecap="round"
            strokeLinejoin="round"
            strokeWidth={2}
            d="M19 9l-7 7-7-7"
          />
        </svg>
        {isExpanded ? 'Ocultar Lista de Héroes' : 'Mostrar Lista de Héroes'}
      </button>

      <div
        className={`transition-all duration-300 ease-in-out ${
          isExpanded ? 'grid-expanded' : 'grid-collapsed'
        }`}
      >
        <div className="hero-grid">
          {heroes.map((hero, index) => (
            <div
              key={index}
              className={`hero-card ${isHeroSelected(hero) ? 'selected' : ''}`}
              onClick={() => onHeroSelect(hero)}
              draggable={onDragStart ? true : false}
              onDragStart={(e) => onDragStart && onDragStart(e, hero)}
            >
              <div className="hero-image-container relative">
                <Image
                  src={hero.image}
                  alt={hero.name}
                  width={60}
                  height={60}
                  className="hero-image"
                />
                <div className="hero-name-overlay opacity-0 absolute inset-0 flex items-center justify-center bg-black bg-opacity-70 text-white text-sm transition-opacity duration-200 hover:opacity-100">
                  {hero.name}
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
};

export default HeroGrid;

--------------------------------------------------
File End
--------------------------------------------------


C:\v2dotapicker\dota-picker-app\src\components\heroList.ts
File type: .ts
const heroes = [
    {
      name: 'Abaddon',
      image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/abaddon.png',
    },
    {
      name: 'Alchemist',
      image: '/images/mini/alchemist.png',
    },
    {
      name: 'Ancient Apparition',
      image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/ancient_apparition.png',
    },
    {
      name: 'Anti-Mage',
      image: '/images/mini/antimage.png',
    },
    {
      name: 'Arc Warden',
      image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/arc_warden.png',
    },
    {
      name: 'Axe',
      image: '/images/mini/axe.png',
    },
    {
      name: 'Bane',
      image: '/images/mini/bane.png',
    },
    {
      name: 'Batrider',
      image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/batrider.png',
    },
    {
      name: 'Beastmaster',
      image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/beastmaster.png',
    },
    {
      name: 'Bloodseeker',
      image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/bloodseeker.png',
    },
    {
      name: 'Bounty Hunter',
      image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/bounty_hunter.png',
    },
    {
      name: 'Brewmaster',
      image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/brewmaster.png',
    },
    {
      name: 'Bristleback',
      image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/bristleback.png',
    },
    {
      name: 'Broodmother',
      image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/broodmother.png',
    },
    {
      name: 'Centaur Warrunner',
      image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/centaur.png',
    },
    {
      name: 'Chaos Knight',
      image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/chaos_knight.png',
    },
    {
      name: 'Chen',
      image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/chen.png',
    },
    {
      name: 'Clinkz',
      image: '/images/mini/clinkz.png',
    },
    {
      name: 'Clockwerk',
      image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/rattletrap.png',
    },
    {
      name: 'Crystal Maiden',
      image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/crystal_maiden.png',
    },
    {
      name: 'Dark Seer',
      image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/dark_seer.png',
    },
    {
      name: 'Dark Willow',
      image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/dark_willow.png',
    },
    {
      name: 'Dazzle',
      image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/dazzle.png',
    },
    {
      name: 'Death Prophet',
      image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/death_prophet.png',
    },
    {
      name: 'Disruptor',
      image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/disruptor.png',
    },
    {
      name: 'Doom',
      image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/doom_bringer.png',
    },
    {
      name: 'Dragon Knight',
      image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/dragon_knight.png',
    },
    {
      name: 'Drow Ranger',
      image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/drow_ranger.png',
    },
    {
      name: 'Earth Spirit',
      image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/earth_spirit.png',
    },
    {
      name: 'Earthshaker',
      image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/earthshaker.png',
    },
    {
      name: 'Elder Titan',
      image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/elder_titan.png',
    },
    {
      name: 'Ember Spirit',
      image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/ember_spirit.png',
    },
    {
      name: 'Enchantress',
      image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/enchantress.png',
    },
    {
      name: 'Enigma',
      image: '/images/mini/enigma.png',
    },
    {
      name: 'Faceless Void',
      image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/faceless_void.png',
    },
    {
      name: 'Grimstroke',
      image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/grimstroke.png',
    },
    {
      name: 'Gyrocopter',
      image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/gyrocopter.png',
    },
    {
      name: 'Hoodwink',
      image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/hoodwink.png',
    },
    {
      name: 'Huskar',
      image: '/images/mini/huskar.png',
    },
    {
      name: 'Invoker',
      image: '/images/mini/invoker.png',
    },
    {
      name: 'Io',
      image: '/images/mini/wisp.png',
    },
    {
      name: 'Jakiro',
      image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/jakiro.png',
    },
    {
      name: 'Juggernaut',
      image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/juggernaut.png',
    },
    {
      name: 'Keeper of the Light',
      image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/keeper_of_the_light.png',
    },
    {
      name: 'Kunkka',
      image: '/images/mini/kunkka.png',
    },
    {
      name: 'Legion Commander',
      image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/legion_commander.png',
    },
    {
      name: 'Leshrac',
      image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/leshrac.png',
    },
    {
      name: 'Lich',
      image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/lich.png',
    },
    {
      name: 'Lifestealer',
      image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/life_stealer.png',
    },
    {
      name: 'Lina',
      image: '/images/mini/lina.png',
    },
    {
      name: 'Lion',
      image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/lion.png',
    },
    {
      name: 'Lone Druid',
      image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/lone_druid.png',
    },
    {
      name: 'Luna',
      image: '/images/mini/luna.png',
    },
    {
      name: 'Lycan',
      image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/lycan.png',
    },
    {
      name: 'Magnus',
      image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/magnataur.png',
    },
    {
      name: 'Marci',
      image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/marci.png',
    },
    {
      name: 'Mars',
      image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/mars.png',
    },
    {
      name: 'Medusa',
      image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/medusa.png',
    },
    {
      name: 'Meepo',
      image: '/images/mini/meepo.png',
    },
    {
      name: 'Mirana',
      image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/mirana.png',
    },
    {
      name: 'Monkey King',
      image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/monkey_king.png',
    },
    {
      name: 'Morphling',
      image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/morphling.png',
    },
    {
      name: 'Muerta',
      image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/muerta.png',
    },
    {
      name: 'Naga Siren',
      image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/naga_siren.png',
    },
    {
      name: "Nature's Prophet",
      image: '/images/mini/furion.png',
    },
    {
      name: 'Necrophos',
      image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/necrolyte.png',
    },
    {
      name: 'Night Stalker',
      image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/night_stalker.png',
    },
    {
      name: 'Nyx Assassin',
      image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/nyx_assassin.png',
    },
    {
      name: 'Ogre Magi',
      image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/ogre_magi.png',
    },
    {
      name: 'Omniknight',
      image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/omniknight.png',
    },
    {
      name: 'Oracle',
      image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/oracle.png',
    },
    {
      name: 'Outworld Devourer',
      image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/obsidian_destroyer.png',
    },
    {
      name: 'Pangolier',
      image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/pangolier.png',
    },
    {
      name: 'Phantom Assassin',
      image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/phantom_assassin.png',
    },
    {
      name: 'Phantom Lancer',
      image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/phantom_lancer.png',
    },
    {
      name: 'Phoenix',
      image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/phoenix.png',
    },
    {
      name: 'Primal Beast',
      image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/primal_beast.png',
  },
  {
  name: 'Puck',
  image: '/images/mini/puck.png',
  },
  {
  name: 'Pudge',
  image: '/images/mini/pudge.png',
  },
  {
  name: 'Pugna',
  image: '/images/mini/pugna.png',
  },
  {
  name: 'Queen of Pain',
  image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/queenofpain.png',
  },
  {
  name: 'Razor',
  image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/razor.png',
  },
  {
  name: 'Riki',
  image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/riki.png',
  },
  {
  name: 'Rubick',
  image: '/images/mini/rubick.png',
  },
  {
  name: 'Sand King',
  image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/sand_king.png',
  },
  {
  name: 'Shadow Demon',
  image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/shadow_demon.png',
  },
  {
  name: 'Shadow Fiend',
  image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/nevermore.png',
  },
  {
  name: 'Shadow Shaman',
  image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/shadow_shaman.png',
  },
  {
  name: 'Silencer',
  image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/silencer.png',
  },
  {
  name: 'Skywrath Mage',
  image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/skywrath_mage.png',
  },
  {
  name: 'Slardar',
  image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/slardar.png',
  },
  {
  name: 'Slark',
  image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/slark.png',
  },
  {
  name: 'Snapfire',
  image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/snapfire.png',
  },
  {
  name: 'Sniper',
  image: '/images/mini/sniper.png',
  },
  {
  name: 'Spectre',
  image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/spectre.png',
  },
  {
  name: 'Spirit Breaker',
  image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/spirit_breaker.png',
  },
  {
  name: 'Storm Spirit',
  image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/storm_spirit.png',
  },
  {
  name: 'Sven',
  image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/sven.png',
  },
  {
  name: 'Techies',
  image: '/images/mini/techies.png',
  },
  {
  name: 'Templar Assassin',
  image: '/images/mini/templar_assassin.png',
  },
  {
  name: 'Terrorblade',
  image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/terrorblade.png',
  },
  {
  name: 'Tidehunter',
  image: '/images/mini/tidehunter.png',
  },
  {
  name: 'Timbersaw',
  image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/shredder.png',
  },
  {
  name: 'Tinker',
  image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/tinker.png',
  },
  {
  name: 'Tiny',
  image: '/images/mini/tiny.png',
  },
  {
  name: 'Treant Protector',
  image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/treant.png',
  },
  {
  name: 'Troll Warlord',
  image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/troll_warlord.png',
  },
  {
  name: 'Tusk',
  image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/tusk.png',
  },
  {
  name: 'Underlord',
  image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/abyssal_underlord.png',
  },
  {
  name: 'Undying',
  image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/undying.png',
  },
  {
  name: 'Ursa',
  image: '/images/mini/ursa.png',
  },
  {
  name: 'Vengeful Spirit',
  image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/vengefulspirit.png',
  },
  {
  name: 'Venomancer',
  image: '/images/mini/venomancer.png',
  },
  {
  name: 'Viper',
  image: '/images/mini/viper.png',
  },
  {
  name: 'Visage',
  image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/visage.png',
  },
  {
  name: 'Void Spirit',
  image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/void_spirit.png',
  },
  {
  name: 'Warlock',
  image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/warlock.png',
  },
  {
  name: 'Weaver',
  image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/weaver.png',
  },
  {
  name: 'Windranger',
  image: '/images/mini/windrunner.png',
  },
  {
  name: 'Winter Wyvern',
  image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/winter_wyvern.png',
  },
  {
  name: 'Witch Doctor',
  image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/witch_doctor.png',
  },
  {
  name: 'Wraith King',
  image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/skeleton_king.png',
  },
  {
  name: 'Zeus',
  image: 'https://cdn.akamai.steamstatic.com/apps/dota2/images/dota_react/heroes/zuus.png',
  },
  ];
  
  export default heroes;

--------------------------------------------------
File End
--------------------------------------------------


C:\v2dotapicker\dota-picker-app\src\components\HeroPicker.tsx
File type: .tsx
// src/components/HeroPicker.tsx
"use client";

import { useState } from "react";
import HeroGrid from "./HeroGrid";

interface Hero {
  name: string;
  image: string;
}

const positions = ["Carry", "Offlaner", "Support", "Hard Support", "Midlaner"];

const HeroPicker = () => {
  const [selectedHero, setSelectedHero] = useState<Hero | null>(null);
  const [selectedPosition, setSelectedPosition] = useState(positions[0]);
  const [counterPicks, setCounterPicks] = useState("");
  const [error, setError] = useState("");
  const [loading, setLoading] = useState(false);

  const handleHeroSelect = (hero: Hero) => {
    setSelectedHero(hero);
  };

  const handleHeroSelection = async () => {
    if (!selectedHero || !selectedPosition) {
      setError("Debes seleccionar un héroe y una posición.");
      return;
    }
    setError("");
    setLoading(true);

    const response = await fetch("/api/generate-hero", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        userHeroSelection: selectedHero.name,
        position: selectedPosition,
      }),
    });

    setLoading(false);

    if (!response.ok) {
      const errorData = await response.json();
      setError(errorData.error || "Error desconocido");
      return;
    }

    const data = await response.json();
    setCounterPicks(data.counterPicks);
  };

  return (
    <div className="p-4">
      <h2 className="block mb-4 font-semibold">Selecciona un héroe:</h2>

      {/* Hero Grid Component */}
      <HeroGrid
        onHeroSelect={handleHeroSelect}
        selectedHeroes={selectedHero ? [selectedHero] : []}
      />

      {/* Selección de posición */}
      <label htmlFor="positionSelect" className="block mt-4 mb-2 font-semibold">
        Selecciona tu posición:
      </label>
      <select
        id="positionSelect"
        value={selectedPosition}
        onChange={(e) => setSelectedPosition(e.target.value)}
        className="mb-4 border rounded p-2 bg-gray-700 text-white"
      >
        {positions.map((position) => (
          <option key={position} value={position}>
            {position}
          </option>
        ))}
      </select>

      {/* Botón para obtener héroes counter */}
      <button
        onClick={handleHeroSelection}
        disabled={!selectedHero}
        className={`mb-4 bg-blue-500 text-white rounded p-2 hover:bg-blue-600 transition ${
          !selectedHero ? "opacity-50 cursor-not-allowed" : ""
        }`}
      >
        Obtener héroes counter
      </button>

            {/* Mostrar héroe seleccionado */}
            {selectedHero && (
        <div className="selected-hero-display mt-4 mb-4 p-3 bg-gray-800 rounded-lg flex items-center gap-3">
          <span className="text-white">
            Héroe seleccionado: <b>{selectedHero.name}</b>
          </span>
        </div>
      )}

      {loading && <div className="loader"></div>}

      {error && <p className="text-red-500">{error}</p>}



      {/* Mostrar héroes counter */}
      {counterPicks && (
        <div className="mt-4 p-4 bg-gray-800 rounded-lg">
          <h2 className="text-lg font-semibold mb-3">
            Counter Pickers recomendados:
          </h2>
          <ul className="space-y-2">
            {counterPicks.split("\n").map((pick, index) => (
              <li key={index} className="flex items-start gap-2">
                <span>{pick.trim()}</span>
              </li>
            ))}
          </ul>
        </div>
      )}
    </div>
  );
};

export default HeroPicker;


--------------------------------------------------
File End
--------------------------------------------------


C:\v2dotapicker\dota-picker-app\src\components\ItemizationCalculator.css
File type: .css
/* src/components/ItemizationCalculator.css */
.itemization-calculator {
    width: 100%;
    max-width: 1200px;
    margin: 0 auto;
  }
  

  
  .enemy-slots {
    display: flex;
    gap: 1rem;
    margin-bottom: 2rem;
  }
  
  .hero-slot {
    background: linear-gradient(0deg, rgb(47 47 47) 0%, rgb(21 21 24) 100%);
    border: 2px solid #353535;
    border-radius: 8px;
    padding: 1rem;
    min-height: 120px;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: all 0.3s ease;
  }
  
  .hero-slot.selected {
    border-color: #00ff00;
  }
  
  .main-hero .hero-slot {
    width: 200px;
    margin: 0 auto;
  }
  
  .selected-hero {
    position: relative;
    width: 100%;
    text-align: center;
  }
  
  .selected-hero img {
    width: 60px;
    height: 60px;
    object-fit: cover;
    margin-bottom: 0.5rem;
  }
  

  
  .recommendations-container {
    background: rgba(17, 17, 17, 0.7);
    border-radius: 12px;
    padding: 24px;
    margin-top: 24px;
  }
  
  .build-card {
    backdrop-filter: blur(8px);
    border: 1px solid rgba(75, 75, 75, 0.2);
    transition: all 0.3s ease;
  }
  
  .build-card:hover {
    border-color: rgba(74, 222, 128, 0.3);
    transform: translateY(-2px);
  }
  
  .item-tooltip-container .tooltip {
    transition: all 0.2s ease;
    min-width: 200px;
    font-size: 0.875rem;
    border: 1px solid rgba(74, 222, 128, 0.2);
    backdrop-filter: blur(12px);
  }
  
  .items-container {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(48px, 1fr));
    gap: 8px;
    max-width: 100%;
  }
  
  @media (max-width: 768px) {
    .builds-grid {
      flex-direction: column;
    }
  
    .build-card {
      max-width: 100%;
    }
  }
  
  /* Animaciones */
  @keyframes fadeIn {
    from { opacity: 0; transform: translateY(10px); }
    to { opacity: 1; transform: translateY(0); }
  }
  
  .recommendations-container {
    animation: fadeIn 0.3s ease-out;
  }
  
  /* Mejoras de accesibilidad */
  .item-tooltip-container img:focus {
    outline: 2px solid rgb(74, 222, 128);
    outline-offset: 2px;
  }
  
  /* Tema oscuro optimizado */
  @media (prefers-color-scheme: dark) {
    .build-card {
      background: rgba(17, 24, 39, 0.8);
    }
    
    .tooltip {
      background: rgba(17, 24, 39, 0.95);
    }
  }

  .phase-container {
    margin-bottom: 2rem;
  }
  
  .phase-title {
    font-size: 1.2rem;
    font-weight: bold;
    margin-bottom: 1rem;
    color: #00ff00;
  }
  
  .items-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
    gap: 1rem;
  }
  
  .item-card {
    background: rgba(0, 0, 0, 0.3);
    padding: 1rem;
    border-radius: 8px;
    text-align: center;
  }
  
  .item-image {
    width: 64px;
    height: 64px;
    margin: 0 auto 1rem;
  }
  
  .submit-button {
    width: 100%;
    padding: 1rem;
    background: #4CAF50;
    color: white;
    border: none;
    border-radius: 8px;
    cursor: pointer;
    font-size: 1.1rem;
    margin: 2rem 0;
    transition: background 0.3s ease;
  }
  
  .submit-button:hover {
    background: #45a049;
  }
  
  .submit-button.disabled {
    background: #cccccc;
    cursor: not-allowed;
  }
  
  .loader {
    margin: 2rem auto;
  }
  
  @media (max-width: 768px) {
    .enemy-slots {
      flex-wrap: wrap;
    }
  
    .hero-slot {
      flex: 1 1 calc(50% - 0.5rem);
      min-height: 100px;
    }
  
    .items-grid {
      grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
    }
  }

  .hero-grid {
    display: grid;
    gap: 6px;
    grid-template-columns: repeat(12, minmax(90px, 1fr));
    margin-bottom: 20px;
  }
  
  .hero-card {
    background-color: rgba(27, 27, 27, 0.8);
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.5);
    text-align: center;
    height: fit-content;
    cursor: pointer;
    transition: transform 0.2s, border 0.2s;
    flex-direction: column;
    justify-content: space-between;
  }
  
  .hero-card:hover {
    transform: scale(1.05);
  }
  
  .hero-card.selected {
    filter: grayscale(100%) opacity(0.5);
    pointer-events: none;
  }
  
  .hero-name {
    font-size: 18px;
    margin-bottom: 10px;
    color: #ffffff;
  }
  
  .hero-image {
    width: 100%;
    height: 60px;
    object-fit: cover;
  }
  
  @media (max-width: 600px) {
    .hero-grid {
      grid-template-columns: repeat(5, 1fr);
    }
  
    .hero-name {
      font-size: 14px;
    }
  
    .hero-image-container {
      height: 40px !important;
    }
  
    .hero-image {
      width: 100%;
      height: 40px;
      object-fit: cover;
    }
  }
  
  .hero-card p {
    margin-block-start: 4px;
    text-overflow: ellipsis;
    overflow-wrap: break-word;
    margin-block-end: 4px;
  }

  .bloquetotal-item{
    display: flex;
    flex-direction: row;
    flex-wrap: nowrap;
    align-content: center;
    justify-content: space-around;
  }

  .remove-button{
    align-self: center;
  }

  .main-hero{
    max-width: 110px;
      background: linear-gradient(0deg, rgb(47 47 47) 0%, rgb(21 21 24) 100%);
      border: 2px solid #353535;
      border-radius: 8px;
      padding: 1rem;
      display: flex
  ;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      cursor: pointer;
      transition: all 0.3s ease;
  }

  .main-hero .flex{
    display: flex;
    flex-direction: column;
    gap: 6px;
  }

  .enemy-slots .hero-slot{
    max-width: 110px;
  }

.selectorali{
  margin-bottom: 4px !important;
}

  .hero-slot{
    min-height: 180px;
    gap: 4px;
  }

  .build-container {
    margin-bottom: 2rem;
    padding: 1.5rem;
    background-color: #2a2a2a;
    border-radius: 8px;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  }
  
  .build-title {
    font-size: 1.5rem;
    font-weight: bold;
    margin-bottom: 0.5rem;
    color: #00ff00;
  }
  
  .build-description {
    margin-bottom: 1rem;
    color: #ffffff;
  }
  
  .phase-container {
    margin-bottom: 1.5rem;
  }
  
  .phase-title {
    font-size: 1.2rem;
    font-weight: bold;
    margin-bottom: 0.5rem;
    color: #00ff00;
  }
  
  .items-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
    gap: 1rem;
  }
  
  .item-card {
    background-color: #1e1e1e;
    padding: 1rem;
    border-radius: 4px;
    text-align: center;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }
  
  .item-image {
    width: 64px;
    height: 64px;
    margin: 0 auto 0.5rem;
  }
  
  .item-card h5 {
    font-size: 1rem;
    font-weight: bold;
    margin-bottom: 0.25rem;
    color: #ffffff;
  }
  
  .item-card p {
    font-size: 0.875rem;
    color: #c0c0c0;
  }

  .phases-grid{
    display: flex;
    justify-content: space-evenly;
    align-items: flex-start;
    gap: 40px;
  }

  .phase-section{
    display: flex;
    flex-direction: column;
    flex-wrap: nowrap;
    width: 33.3%;
  }

  .items-container{
    display: flex;
    flex-direction: column;
  }

  .build-card{
    padding: 20px;
    border-radius: 20px;
    background: #1c1c1c;
  }

  .phase-section img{
    height: 80px;
  }

  .item-tooltip-container .tooltip{
    padding-left: 10px;
    padding-right: 10px;
  }

  .phase-title {
    margin-top: 5px;
  }

  .item-tooltip-container .text-sm{
    min-height: 60px;
  }

  .mb-1{
    font-weight: 700;
  }

--------------------------------------------------
File End
--------------------------------------------------


C:\v2dotapicker\dota-picker-app\src\components\ItemizationCalculator.tsx
File type: .tsx
// src/components/ItemizationCalculator.tsx
import { useState } from "react";
import heroes from "./heroList";
import "./ItemizationCalculator.css";
import HeroGrid from './HeroGrid';

interface ItemRecommendationsProps {
  recommendations: ItemRecommendations;
  selectedHero: Hero | null;
  enemyHeroes: (Hero | null)[];
}

interface Hero {
  name: string;
  image: string;
  role?: string; // Añadimos el rol como opcional
}

interface Item {
  name: string;
  reason: string;
  image: string;
}

interface ItemBuild {
  title: string;
  description: string;
  items: {
    early: Item[];
    mid: Item[];
    late: Item[];
  };
}

interface ItemRecommendations {
  builds: ItemBuild[];
}

const BuildCard = ({ build }: { build: ItemBuild }) => {
  return (
    <div className="build-card bg-gray-800 rounded-lg p-4 flex-1 min-w-[300px] max-w-[400px]">
      <div className="build-header mb-4">
        <h4 className="text-xl font-bold text-green-400">{build.title}</h4>
        <p className="text-sm text-gray-300">{build.description}</p>
      </div>

      <div className="phases-grid">
        {["early", "mid", "late"].map((phase) => (
          <div key={phase} className="phase-section mb-4">
            <h5 className="phase-title text-sm font-semibold text-green-400 mb-2">
              {phase === "early"
                ? "Fase Inicial"
                : phase === "mid"
                ? "Fase Media"
                : "Fase Tardía"}
            </h5>
            <div className="items-container flex flex-wrap gap-2">
              {build.items[phase as keyof typeof build.items].map(
                (item, idx) => (
                  <div
                    key={idx}
                    className="item-tooltip-container relative group"
                  >
                    <img
                      src={item.image}
                      alt={item.name}
                      className="w-12 h-12 rounded border border-gray-600 hover:border-green-400 transition-all cursor-help"
                    />
                    <div className="tooltip opacity-0 group-hover:opacity-100 absolute z-10 left-1/2 -bottom-2 transform -translate-x-1/2 translate-y-full bg-gray-900 text-white p-2 rounded shadow-lg w-48 pointer-events-none transition-opacity">
                      <p className="font-semibold text-green-400 mb-1">
                        {item.name}
                      </p>
                      <p className="text-sm">{item.reason}</p>
                    </div>
                  </div>
                )
              )}
            </div>
          </div>
        ))}
      </div>
    </div>
  );
};

const ItemRecommendations: React.FC<ItemRecommendationsProps> = ({
  recommendations,
  selectedHero,
  enemyHeroes,
}) => {
  const build = recommendations.builds[0]; // Solo tomamos la primera build
  return (
    <div className="recommendations-container">
      <div className="recommendations-header mb-6">
        <div>
          <h3 className="text-2xl font-bold text-white mb-2">
            Build Óptima para {selectedHero?.name} ({selectedHero?.role})
          </h3>
          {enemyHeroes.some((h: Hero | null) => h !== null) && (
            <p className="text-sm text-gray-400">
              Contra: {enemyHeroes.filter(h => h !== null).map(h => h?.name).join(', ')}
            </p>
          )}
        </div>
      </div>

      <div className="build-card bg-gray-800 rounded-lg p-6">
        <div className="build-header mb-6">
          <p className="text-gray-300 text-sm">{build.description}</p>
        </div>

        <div className="phases-grid space-y-6">
          {["early", "mid", "late"].map((phase) => (
            <div key={phase} className="phase-section">
              <h5 className="phase-title text-sm font-semibold text-green-400 mb-3">
                {phase === "early"
                  ? "Fase Inicial"
                  : phase === "mid"
                  ? "Fase Media"
                  : "Fase Tardía"}
              </h5>
              <div className="items-container flex flex-wrap gap-3">
                {build.items[phase as keyof typeof build.items].map((item, idx) => (
                  <div
                    key={idx}
                    className="item-tooltip-container relative group"
                  >
                    <img
                      src={item.image}
                      alt={item.name}
                      className="w-12 h-12 rounded border border-gray-600 hover:border-green-400 transition-all cursor-help"
                    />
                    <div className="tooltip opacity-0 group-hover:opacity-100 absolute z-10 left-1/2 -bottom-2 transform -translate-x-1/2 translate-y-full bg-gray-900 text-white p-2 rounded shadow-lg w-48 pointer-events-none transition-opacity">
                      <p className="font-semibold text-green-400 mb-1">
                        {item.name}
                      </p>
                      <p className="text-sm">{item.reason}</p>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
};
const roles = ["Hard Support", "Support", "Midlaner", "Carry", "Offlaner"];

const ItemizationCalculator = () => {
  const [selectedHero, setSelectedHero] = useState<Hero | null>(null);
  const [selectedRole, setSelectedRole] = useState<string>("Carry"); // Añadimos estado para el rol
  const [enemyHeroes, setEnemyHeroes] = useState<(Hero | null)[]>(
    Array(5).fill(null)
  );
  const [recommendations, setRecommendations] = useState<ItemRecommendations>({
    builds: [],
  });
  const [loading, setLoading] = useState<boolean>(false);
  const [selectedSlot, setSelectedSlot] = useState<number>(-1);

  const handleDragStart = (
    event: React.DragEvent<HTMLDivElement>,
    hero: Hero
  ) => {
    event.dataTransfer.setData("heroName", hero.name);
    event.dataTransfer.setData("heroImage", hero.image);
  };

  const handleDragOver = (event: React.DragEvent<HTMLDivElement>) => {
    event.preventDefault();
  };

  const handleDrop = (
    event: React.DragEvent<HTMLDivElement>,
    type: "main" | "enemy",
    index?: number
  ) => {
    event.preventDefault();
    const heroName = event.dataTransfer.getData("heroName");
    const heroImage = event.dataTransfer.getData("heroImage");
    const hero = {
      name: heroName,
      image: heroImage,
      role: type === "main" ? selectedRole : roles[index || 0], // Asignamos el rol
    };

    if (type === "main") {
      setSelectedHero(hero);
    } else if (type === "enemy" && index !== undefined) {
      const newEnemies = [...enemyHeroes];
      newEnemies[index] = hero;
      setEnemyHeroes(newEnemies);
    }
  };

  const handleRemoveHero = (type: "main" | "enemy", index?: number) => {
    if (type === "main") {
      setSelectedHero(null);
    } else if (type === "enemy" && index !== undefined) {
      const newEnemies = [...enemyHeroes];
      newEnemies[index] = null;
      setEnemyHeroes(newEnemies);
    }
  };

  const handleSlotClick = (index: number) => {
    setSelectedSlot(selectedSlot === index ? -1 : index);
  };

  const isHeroSelected = (hero: Hero) => {
    return (
      selectedHero?.name === hero.name ||
      enemyHeroes.some((enemyHero) => enemyHero?.name === hero.name)
    );
  };

  const handleHeroClick = (hero: Hero) => {
    if (selectedSlot !== -1) {
      const newEnemies = [...enemyHeroes];
      newEnemies[selectedSlot] = hero;
      setEnemyHeroes(newEnemies);
      setSelectedSlot(-1);
    }
  };

  const handleSubmit = async () => {
    if (!selectedHero) return;

    try {
      setLoading(true);

      const heroWithRole = {
        ...selectedHero,
        role: selectedRole, // Aseguramos que el héroe tenga un rol
      };

      const response = await fetch("/api/generate-items", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          hero: heroWithRole,
          enemies: enemyHeroes,
        }),
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || "Error desconocido");
      }

      const data = await response.json();
      setRecommendations(data);
    } catch (error) {
      console.error("Error:", error);
      // Aquí puedes manejar el error, por ejemplo mostrándolo en la UI
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="p-4 itemization-calculator">
      <h2 className="text-2xl font-bold mb-6">Calculadora de Itemización</h2>

      <div className="bloquetotal-item">
        {/* Selección de héroe principal */}
        <div className="main-hero-section">
          <h2 className="block mb-4 font-semibold center">Tu Héroe</h2>
          {/* Añadimos selector de rol */}
          <select
            value={selectedRole}
            onChange={(e) => setSelectedRole(e.target.value)}
            className="mb-4 border rounded p-2 selectorali"
          >
            {roles.map((role) => (
              <option key={role} value={role}>
                {role}
              </option>
            ))}
          </select>
          <div
            className="main-hero"
            onDragOver={handleDragOver}
            onDrop={(event) => handleDrop(event, "main")}
            onClick={() => handleSlotClick(-1)}
          >

            {selectedHero ? (
              <div className="flex flex-col items-center">
                <img
                  src={selectedHero.image}
                  alt={selectedHero.name}
                  className="hero-image"
                />
                <button
                  onClick={() => handleRemoveHero("main")}
                  className="remove-button"
                >
                  X
                </button>
              </div>
            ) : (
              <p className="empty-slot">Selecciona tu héroe</p>
            )}
          </div>
        </div>

        {/* Selección de héroes enemigos */}
        <div className="enemy-heroes-section">
          <h2 className="block mb-4 font-semibold center">Héroes Enemigos</h2>
          <div className="enemy-slots">
            {enemyHeroes.map((hero, index) => (
              <div
                key={index}
                className={`hero-slot ${
                  selectedSlot === index ? "selected" : ""
                }`}
                onDragOver={handleDragOver}
                onDrop={(event) => handleDrop(event, "enemy", index)}
                onClick={() => handleSlotClick(index)}
              >
                <p>{roles[index]}</p>
                {hero ? (
                  <div className="flex flex-col items-center">
                    <img
                      src={hero.image}
                      alt={hero.name}
                      className="hero-image"
                    />
                    <button
                      onClick={() => handleRemoveHero("enemy", index)}
                      className="remove-button"
                    >
                      X
                    </button>
                  </div>
                ) : (
                  <p className="empty-slot">Selecciona héroe</p>
                )}
              </div>
            ))}
          </div>
        </div>
      </div>

      {/* Grid de héroes */}
<HeroGrid
  onHeroSelect={(hero) => {
    if (selectedSlot !== -1) {
      const newEnemies = [...enemyHeroes];
      newEnemies[selectedSlot] = hero;
      setEnemyHeroes(newEnemies);
      setSelectedSlot(-1);
    }
  }}
  selectedHeroes={[selectedHero, ...enemyHeroes].filter(Boolean)}
  onDragStart={(event, hero) => {
    event.dataTransfer.setData("heroName", hero.name);
    event.dataTransfer.setData("heroImage", hero.image);
  }}
/>

      {/* Botón para generar recomendaciones */}
      <button
        onClick={handleSubmit}
        disabled={!selectedHero}
        className={`submit-button ${!selectedHero ? "disabled" : ""}`}
      >
        Generar Recomendaciones de Items
      </button>

      {loading && <div className="loader"></div>}

      {/* Mostrar recomendaciones */}
      {recommendations?.builds?.length > 0 && (
        <ItemRecommendations
          recommendations={recommendations}
          selectedHero={selectedHero}
          enemyHeroes={enemyHeroes}
        />
      )}
    </div>
  );
};

export default ItemizationCalculator;


--------------------------------------------------
File End
--------------------------------------------------


C:\v2dotapicker\dota-picker-app\src\components\RecommendationItem.tsx
File type: .tsx
import React from 'react';

interface RecommendationItemProps {
  role: string;
  heroName: string;
  heroImage: string;
  reasons: string[];
}

const RecommendationItem: React.FC<RecommendationItemProps> = ({ role, heroName, heroImage, reasons }) => {
  return (
    <div className="recommendation">
      <img src={heroImage} alt={heroName} className="hero-image-suggestion" />
      <div className="heroinforecomendation">
        <span className="role">{role}:</span> <span className="hero-name">{heroName}</span>
        <ul className="reason-list">
          {reasons.map((reason, index) => (
            <li key={index}>{reason}</li>
          ))}
        </ul>
      </div>
    </div>
  );
};

export default RecommendationItem;

--------------------------------------------------
File End
--------------------------------------------------


C:\v2dotapicker\dota-picker-app\src\components\SynergyPicker.css
File type: .css
/* CSS actualizado para SynergyPicker */

.slot-grid {
  display: flex; /* Usar flexbox para alinear horizontalmente */
  justify-content: space-between; /* Espaciado igual entre los slots */
  margin-bottom: 1rem; /* Margen inferior entre las secciones */
}

.hero-slot {
  flex: 1;
  box-sizing: border-box;
  border: 2pt solid #353535;
  border-bottom: 5pt solid #353535;
  background: linear-gradient(0deg, rgb(47 47 47) 0%, rgb(21 21 24) 100%);
  text-align: center;
  padding: 5px;
  position: relative;
  min-height: 120px; /* Altura fija para todos los slots */
  cursor: pointer;
  font-size: 12px;
}

.hero-slot:last-child {
  margin-right: 0; /* Elimina el margen derecho en el último héroe */
}

.hero-slot p:first-child {
  margin: 0;
  padding: 5px 0;
  height: 24px; /* Altura fija para el título */
  display: flex;
  align-items: center;
  justify-content: center;
}

.empty-slot {
  color: #888;
  font-style: italic;
  font-size: 10px;
  height: 60px; /* Misma altura que las imágenes */
  display: flex;
  align-items: center;
  justify-content: center;
}
.versus {
  display: flex;
  flex-direction: row;
  gap: 20px;
}

.bloqueigual {
  width: 50%;
  display: inline-block;
  vertical-align: top; /* Alinea los bloques desde arriba */
}

.grillaespecial {
  grid-template-columns: repeat(5, 1fr);
  display: grid;
  align-content: center;
  align-items: center;
  margin-bottom: 20px;
  justify-content: center;
  gap: 10px;
  align-items: stretch; /* Estira los items para tener la misma altura */
}

.hero-image-container {
  position: relative;
  width: 100%;
  height: 60px;
}



.hero-item {
  text-align: center; /* Centrar el texto del héroe */
  cursor: grab; /* Cambiar cursor al pasar por encima */
}

.hero-item:hover {
  background: #f0f0f0; /* Fondo gris al pasar el cursor sobre un héroe */
}

.btn-submit {
  background: #007bff; /* Color de fondo del botón */
  color: white; /* Color del texto */
  border: none; /* Sin borde */
  padding: 0.5rem 1rem; /* Espaciado interno */
  border-radius: 4px; /* Bordes redondeados */
  cursor: pointer; /* Cambiar cursor al pasar por encima */
}

.suggestions {
  background: #f9f9f9; /* Fondo de las sugerencias */
  padding: 1rem; /* Espaciado interno */
  border-radius: 4px; /* Bordes redondeados */
}

@media (max-width: 768px) {
  .hero-slot {
    flex: 1 1; /* En pantallas más pequeñas, dos héroes por fila */
    padding: 10px;
  }

  .grillaespecial{
    margin-bottom: 0px;
  }

  .bloqueigual {
    width: 100%;
  }

  .versus {
    display: flex;
    flex-direction: column;
    gap: 20px;
  }

  .grillaespecial {
    grid-template-columns: repeat(2, 1fr);
    width: 100%;
  }

  .hero-picker-container {
    padding: 20px;
    width: -webkit-fill-available;
  }

  .hero-card {
    padding: 0px;
  }

  .hero-grid {
    gap: 0px;
  }

  .recommendation {
    display: flex;
    flex-direction: column;
    gap: 20px;
  }
}

.center {
  text-align: center;
  color: #00ff00;
}

.hero-card.selected {
  filter: grayscale(100%) opacity(0.5);
  pointer-events: none;
}

.recommendation {
  display: flex;
  align-items: center;
  margin-bottom: 20px;
}

.role {
  font-weight: bold;
  color: #4caf50;
}

.hero-name {
  font-weight: bold;
}

.reason-list {
  color: white;
  list-style-type: disc;
  padding-left: 20px;
}

.heroinforecomendation {
  margin-left: 20px;
}


--------------------------------------------------
File End
--------------------------------------------------


C:\v2dotapicker\dota-picker-app\src\components\SynergyPicker.tsx
File type: .tsx
"use client";

import { useState } from 'react';
import RecommendationItem from './RecommendationItem';
import heroes from './heroList'; // Importa la lista de héroes desde heroList.ts
import './SynergyPicker.css'; // Importa el CSS específico para este componente
import HeroGrid from "./HeroGrid";


interface RecommendationItemProps {
  role: string;
  heroName: string;
  heroImage: string;
  reasons: string[];
}

interface Hero {
  name: string;
  image: string;
}

interface SynergyResponse {
  suggestions: string;
}

const roles = [
  'Hard Support', 'Support', 'Midlaner', 'Carry', 'Offlaner'
];

const ranks = [
  'Heraldo', 'Guardian', 'Cruzado', 'Arconte', 'Leyenda', 'Ancestro', 'Divino', 'Inmortal'
];

const SynergyPicker = () => {
  const [allyHeroes, setAllyHeroes] = useState<(Hero | null)[]>(Array(5).fill(null));
const [enemyHeroes, setEnemyHeroes] = useState<(Hero | null)[]>(Array(5).fill(null));
const [selectedRank, setSelectedRank] = useState<string>(ranks[0]);
const [suggestions, setSuggestions] = useState<RecommendationItemProps[]>([]);
const [loading, setLoading] = useState<boolean>(false);
const [selectedSlot, setSelectedSlot] = useState<{ type: string; index: number }>({ type: '', index: -1 });


  const handleDrop = (event: React.DragEvent<HTMLDivElement>, type: string, index: number) => {
    event.preventDefault();
    const heroName = event.dataTransfer.getData('heroName');
    const heroImage = event.dataTransfer.getData('heroImage');
    const hero = { name: heroName, image: heroImage };

    if (type === 'ally') {
      const newAllies = [...allyHeroes];
      newAllies[index] = hero;
      setAllyHeroes(newAllies);
    } else if (type === 'enemy') {
      const newEnemies = [...enemyHeroes];
      newEnemies[index] = hero;
      setEnemyHeroes(newEnemies);
    }
  };

  const handleDragStart = (event: React.DragEvent<HTMLDivElement>, hero: { name: string; image: string }) => {
    event.dataTransfer.setData('heroName', hero.name);
    event.dataTransfer.setData('heroImage', hero.image);
  };

  const handleRemoveHero = (type: string, index: number) => {
    if (type === 'ally') {
      const newAllies = [...allyHeroes];
      newAllies[index] = null;
      setAllyHeroes(newAllies);
    } else if (type === 'enemy') {
      const newEnemies = [...enemyHeroes];
      newEnemies[index] = null;
      setEnemyHeroes(newEnemies);
    }
  };

  const handleSlotClick = (type: string, index: number) => {
    if (selectedSlot.index === index && selectedSlot.type === type) {
      setSelectedSlot({ type: '', index: -1 }); // Deseleccionar
    } else {
      setSelectedSlot({ type, index });
    }
  };

  const isHeroSelected = (hero: { name: string; image: string }) => {
    return [...allyHeroes, ...enemyHeroes].some(selectedHero => selectedHero && selectedHero.name === hero.name);
  };

  const handleHeroClick = (hero: { name: string; image: string }) => {
    if (selectedSlot.index !== -1 && !isHeroSelected(hero)) {
      const { type, index } = selectedSlot;
      if (type === 'ally') {
        const newAllies = [...allyHeroes];
        newAllies[index] = hero;
        setAllyHeroes(newAllies);
      } else if (type === 'enemy') {
        const newEnemies = [...enemyHeroes];
        newEnemies[index] = hero;
        setEnemyHeroes(newEnemies);
      }
      setSelectedSlot({ type: '', index: -1 });
    }
  };



  const handleSubmit = async () => {
    try {
      setLoading(true);
      
      const response = await fetch('/api/generate-synergy', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          allies: allyHeroes,
          enemies: enemyHeroes,
          rank: selectedRank
        }),
      });
  
      const responseText = await response.text();
      const data = JSON.parse(responseText) as SynergyResponse;
  
      if (!response.ok || !data.suggestions) {
        throw new Error('Error en la solicitud');
      }
  
      const recommendationsData = parseRecommendations(data.suggestions);
      
      if (recommendationsData.length === 0) {
        throw new Error('No se pudieron procesar las sugerencias');
      }
  
      setSuggestions(recommendationsData);
  
      // Actualizado para usar la clase correcta
      setTimeout(() => {
        const suggestionsElement = document.querySelector('.suggestions-container');
        if (suggestionsElement) {
          suggestionsElement.scrollIntoView({ 
            behavior: 'smooth', 
            block: 'start'
          });
        }
      }, 100);
  
    } finally {
      setLoading(false);
    }
  };

  const parseRecommendations = (suggestionsText: string) => {
    const recommendations: RecommendationItemProps[] = [];
    
    // Dividir el texto en bloques por roles
    const blocks = suggestionsText.split('\n\n').filter(block => block.trim());
    
    blocks.forEach(block => {
      const lines = block.split('\n');
      const firstLine = lines[0].trim();
      
      // Buscar el formato "Rol: Héroe" en la primera línea
      const headerMatch = firstLine.match(/^(Hard Support|Support|Midlaner|Carry|Offlaner):\s*(\w+(?:\s+\w+)*)/);
      
      if (headerMatch) {
        const [, role, heroName] = headerMatch;
        
        // Extraer las razones (líneas que empiezan con -)
        const reasons = lines
          .slice(1) // Ignorar la primera línea que contiene el rol y héroe
          .filter(line => line.trim().startsWith('-'))
          .map(line => line.replace(/^-\s*/, '').trim());
        
        if (reasons.length > 0) {
          recommendations.push({
            role: role.trim(),
            heroName: heroName.trim(),
            heroImage: getHeroImage(heroName.trim()),
            reasons
          });
        }
      }
    });
    
    return recommendations;
  };

  const getHeroImage = (heroName: string) => {
    const hero = heroes.find((hero) => hero.name === heroName);
    return hero ? hero.image : '';
  };

  return (
    <div className="p-4 synergy-picker">
      <h2 className="block mb-4 font-semibold">Synergy Picker</h2>
      <div className="versus">
      {/* Espacios para aliados */}
      <div className="flex justify-start mb-4 bloqueigual">
      <h2 className="block mb-4 font-semibold center">Heroes Aliados</h2>
        <div className="grid grid-cols-5 gap-4 grillaespecial">
          {allyHeroes.map((hero, index) => (
            <div
              key={index}
              //className="hero-slot"
              className={`hero-slot ${selectedSlot.type === 'ally' && selectedSlot.index === index ? 'selected' : ''}`}
              onDrop={(event) => handleDrop(event, 'ally', index)}
              onDragOver={(event) => event.preventDefault()}
              onClick={() => handleSlotClick('ally', index)}
            >
              <p>{roles[index]}</p>
              {hero ? (
                <div className="flex flex-col items-center">
                  <img src={hero.image} alt={hero.name} className="hero-image" />
                  <button onClick={() => handleRemoveHero('ally', index)} className="remove-hero-button">X</button>
                </div>
              ) : (
                <p className="empty-slot">Selecciona héroe</p>
              )}
            </div>
          ))}
        </div>
      </div>

      {/* Espacios para enemigos */}
      <div className="flex justify-start mb-4 bloqueigual">
      <h2 className="block mb-4 font-semibold center">Heroes Enemigos</h2>
        <div className="grid grid-cols-5 gap-4 grillaespecial">
          {enemyHeroes.map((hero, index) => (
            <div
              key={index}
              //className="hero-slot"
              className={`hero-slot ${selectedSlot.type === 'enemy' && selectedSlot.index === index ? 'selected' : ''}`}
              onDrop={(event) => handleDrop(event, 'enemy', index)}
              onDragOver={(event) => event.preventDefault()}
              onClick={() => handleSlotClick('enemy', index)}
            >
              <p>{roles[index]}</p>
              {hero ? (
                <div className="flex flex-col items-center">
                  <img src={hero.image} alt={hero.name} className="hero-image" />
                  <button onClick={() => handleRemoveHero('enemy', index)} className="remove-hero-button">X</button>
                </div>
              ) : (
                <p className="empty-slot">Selecciona héroe</p>
              )}
            </div>
          ))}
        </div>
      </div>
      </div>
      
      {/* Selector de héroes */}
      <HeroGrid
  onHeroSelect={handleHeroClick}
  selectedHeroes={[...allyHeroes, ...enemyHeroes].filter(Boolean)}
  onDragStart={handleDragStart}
/>

      {/* Selector de rango */}
      <label className="block mt-4 mb-2 font-semibold">Selecciona el nivel de la medalla:</label>
      <select
        value={selectedRank}
        onChange={(e) => setSelectedRank(e.target.value)}
        className="mb-4 border rounded p-2"
      >
        {ranks.map((rank) => (
          <option key={rank} value={rank}>{rank}</option>
        ))}
      </select>

      {/* Botón para ejecutar */}
      <button
        onClick={handleSubmit}
        className="bg-blue-500 text-white rounded p-2 hover:bg-blue-600 transition"
      >
        Obtener recomendaciones
      </button>

      {/* Indicador de carga */}
      {loading && <div className="loader"></div>}

      {/* Sugerencias */}
      {suggestions.length > 0 && (
  <div className="mt-4 p-4 border rounded suggestions-container">
    <h3 className="font-semibold">Sugerencias:</h3>
    {suggestions.map((suggestion, index) => (
      <RecommendationItem
        key={index}
        role={suggestion.role}
        heroName={suggestion.heroName}
        heroImage={suggestion.heroImage}
        reasons={suggestion.reasons}
      />
    ))}
  </div>
)}
    </div>
  );
};

export default SynergyPicker;


--------------------------------------------------
File End
--------------------------------------------------
